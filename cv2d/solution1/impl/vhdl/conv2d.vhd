-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=514,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=331,HLS_SYN_LUT=750,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_cast_fu_267_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_cast_reg_664 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_1_fu_277_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_1_reg_672 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond5_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_366_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_694 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_3_fu_378_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond4_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_398_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_reg_712 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_fu_403_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_fu_419_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_725 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond3_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_455_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_reg_735 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_743 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_1_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_748 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_516_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_756 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_24_cast_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_reg_761 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_cast_fu_536_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_cast_reg_771 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal y_1_fu_546_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_1_reg_779 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_787 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_21_fu_580_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_reg_792 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_586_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_fu_616_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_805 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal line_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_load_1_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal kernel_load_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sum_2_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal line_buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal line_buffer_ce0 : STD_LOGIC;
    signal line_buffer_we0 : STD_LOGIC;
    signal line_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_139 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal j2_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j3_reg_174 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_197 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal y_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_233 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_27_cast_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_299_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_cast_fu_295_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_307_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_317_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_327_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_cast_fu_323_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_335_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_345_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_350_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_362_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_384_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_388_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_425_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_429_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_443_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_451_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_439_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast9_fu_461_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_465_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_492_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_cast_fu_488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_568_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl7_cast_fu_576_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_fu_564_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_592_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j5_cast_fu_606_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_622_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_cast_fu_627_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_631_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_cast_fu_641_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_645_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component conv2d_line_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    line_buffer_U : component conv2d_line_buffer
    generic map (
        DataWidth => 32,
        AddressRange => 15,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_address0,
        ce0 => line_buffer_ce0,
        we0 => line_buffer_we0,
        d0 => line_buffer_d0,
        q0 => line_buffer_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_271_p2 = ap_const_lv1_0) and (tmp_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_151 <= ap_const_lv2_1;
            elsif (((exitcond4_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i1_reg_151 <= i_2_fu_403_p2;
            end if; 
        end if;
    end process;

    i4_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i4_reg_233 <= ap_const_lv2_0;
            elsif (((exitcond_fu_610_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i4_reg_233 <= i_3_reg_787;
            end if; 
        end if;
    end process;

    i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_271_p2 = ap_const_lv1_0) and (tmp_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_186 <= ap_const_lv2_0;
            elsif (((exitcond6_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_reg_186 <= i_1_reg_743;
            end if; 
        end if;
    end process;

    j2_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j2_reg_163 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j2_reg_163 <= j_3_reg_702;
            end if; 
        end if;
    end process;

    j3_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j3_reg_174 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j3_reg_174 <= j_2_reg_725;
            end if; 
        end if;
    end process;

    j5_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j5_reg_256 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j5_reg_256 <= j_4_reg_805;
            end if; 
        end if;
    end process;

    j_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_reg_197 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_197 <= j_1_reg_756;
            end if; 
        end if;
    end process;

    sum_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_1_reg_244 <= sum_reg_220;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                sum_1_reg_244 <= sum_2_fu_659_p2;
            end if; 
        end if;
    end process;

    sum_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_540_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                sum_reg_220 <= ap_const_lv32_0;
            elsif (((exitcond_fu_610_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                sum_reg_220 <= sum_1_reg_244;
            end if; 
        end if;
    end process;

    x_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                x_reg_139 <= x_1_reg_672;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_139 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    y_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                y_reg_208 <= y_1_reg_779;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and ((exitcond3_fu_413_p2 = ap_const_lv1_1) or (tmp_reg_677 = ap_const_lv1_1)))) then 
                y_reg_208 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_1_reg_743 <= i_1_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_3_reg_787 <= i_3_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_1_reg_756 <= j_1_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_677 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                j_2_reg_725 <= j_2_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_3_reg_702 <= j_3_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_4_reg_805 <= j_4_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                kernel_load_reg_825 <= kernel_q0;
                line_buffer_load_1_reg_820 <= line_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_15_reg_830 <= tmp_15_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_16_reg_712 <= tmp_16_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((exitcond3_fu_413_p2 = ap_const_lv1_1) or (tmp_reg_677 = ap_const_lv1_1)))) then
                tmp_18_reg_735 <= tmp_18_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_476_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_1_reg_748 <= tmp_1_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_21_reg_792 <= tmp_21_fu_580_p2;
                tmp_22_reg_797 <= tmp_22_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_24_cast_reg_761(4 downto 0) <= tmp_24_cast_fu_531_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_4_reg_694 <= tmp_4_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_289_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_7_reg_684 <= tmp_7_fu_311_p2;
                tmp_9_reg_689 <= tmp_9_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_677 <= tmp_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_1_reg_672 <= x_1_fu_277_p2;
                    x_cast_reg_664(1 downto 0) <= x_cast_fu_267_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                y_1_reg_779 <= y_1_fu_546_p2;
                    y_cast_reg_771(1 downto 0) <= y_cast_fu_536_p1(1 downto 0);
            end if;
        end if;
    end process;
    x_cast_reg_664(2) <= '0';
    tmp_24_cast_reg_761(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    y_cast_reg_771(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_283_p2, tmp_reg_677, exitcond8_fu_271_p2, ap_CS_fsm_state3, exitcond5_fu_289_p2, ap_CS_fsm_state4, exitcond4_fu_372_p2, ap_CS_fsm_state6, exitcond3_fu_413_p2, ap_CS_fsm_state8, exitcond7_fu_476_p2, ap_CS_fsm_state9, exitcond6_fu_510_p2, ap_CS_fsm_state11, ap_CS_fsm_state12, exitcond1_fu_552_p2, ap_CS_fsm_state13, exitcond_fu_610_p2, exitcond2_fu_540_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((exitcond8_fu_271_p2 = ap_const_lv1_0) and (tmp_fu_283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond5_fu_289_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond4_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((exitcond3_fu_413_p2 = ap_const_lv1_1) or (tmp_reg_677 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((exitcond7_fu_476_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond6_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((exitcond2_fu_540_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((exitcond1_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_610_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_271_p2)
    begin
        if (((exitcond8_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_271_p2)
    begin
        if (((exitcond8_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_552_p2 <= "1" when (i4_reg_233 = ap_const_lv2_3) else "0";
    exitcond2_fu_540_p2 <= "1" when (y_reg_208 = ap_const_lv2_3) else "0";
    exitcond3_fu_413_p2 <= "1" when (j3_reg_174 = ap_const_lv3_5) else "0";
    exitcond4_fu_372_p2 <= "1" when (j2_reg_163 = ap_const_lv3_5) else "0";
    exitcond5_fu_289_p2 <= "1" when (i1_reg_151 = ap_const_lv2_3) else "0";
    exitcond6_fu_510_p2 <= "1" when (j_reg_197 = ap_const_lv3_5) else "0";
    exitcond7_fu_476_p2 <= "1" when (i_reg_186 = ap_const_lv2_3) else "0";
    exitcond8_fu_271_p2 <= "1" when (x_reg_139 = ap_const_lv2_3) else "0";
    exitcond_fu_610_p2 <= "1" when (j5_reg_256 = ap_const_lv2_3) else "0";
    i_1_fu_482_p2 <= std_logic_vector(unsigned(i_reg_186) + unsigned(ap_const_lv2_1));
    i_2_fu_403_p2 <= std_logic_vector(unsigned(i1_reg_151) + unsigned(ap_const_lv2_1));
    i_3_fu_558_p2 <= std_logic_vector(unsigned(i4_reg_233) + unsigned(ap_const_lv2_1));

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, tmp_24_cast_fu_531_p1, tmp_25_cast_fu_434_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_24_cast_fu_531_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= tmp_25_cast_fu_434_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j5_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_256),3));
    j_1_fu_516_p2 <= std_logic_vector(unsigned(j_reg_197) + unsigned(ap_const_lv3_1));
    j_2_fu_419_p2 <= std_logic_vector(unsigned(j3_reg_174) + unsigned(ap_const_lv3_1));
    j_3_fu_378_p2 <= std_logic_vector(unsigned(j2_reg_163) + unsigned(ap_const_lv3_1));
    j_4_fu_616_p2 <= std_logic_vector(unsigned(j5_reg_256) + unsigned(ap_const_lv2_1));
    kernel_address0 <= tmp_37_cast_fu_650_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_address0_assign_proc : process(ap_CS_fsm_state4, tmp_24_cast_reg_761, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_27_cast_fu_393_p1, tmp_28_cast_fu_409_p1, tmp_26_cast_fu_471_p1, tmp_36_cast_fu_636_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            line_buffer_address0 <= tmp_36_cast_fu_636_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            line_buffer_address0 <= tmp_24_cast_reg_761(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            line_buffer_address0 <= tmp_26_cast_fu_471_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line_buffer_address0 <= tmp_28_cast_fu_409_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_buffer_address0 <= tmp_27_cast_fu_393_p1(4 - 1 downto 0);
        else 
            line_buffer_address0 <= "XXXX";
        end if; 
    end process;


    line_buffer_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state13, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            line_buffer_ce0 <= ap_const_logic_1;
        else 
            line_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_d0_assign_proc : process(input_r_q0, line_buffer_q0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            line_buffer_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line_buffer_d0 <= line_buffer_q0;
        else 
            line_buffer_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buffer_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            line_buffer_we0 <= ap_const_logic_1;
        else 
            line_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= tmp_31_cast_fu_601_p1(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum_reg_220;

    output_r_we0_assign_proc : process(ap_CS_fsm_state12, exitcond1_fu_552_p2)
    begin
        if (((exitcond1_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_327_p3),5));
    p_shl3_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_299_p3),5));
    p_shl4_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_354_p3),6));
    p_shl5_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_443_p3),5));
    p_shl7_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_568_p3),5));
    p_shl_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_492_p3),5));
    sum_2_fu_659_p2 <= std_logic_vector(unsigned(sum_1_reg_244) + unsigned(tmp_15_reg_830));
    tmp_10_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_208),5));
    tmp_10_fu_526_p2 <= std_logic_vector(unsigned(tmp_1_reg_748) + unsigned(tmp_8_cast_fu_522_p1));
    tmp_11_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_233),5));
    tmp_11_fu_429_p2 <= std_logic_vector(unsigned(tmp_4_reg_694) + unsigned(tmp_cast_fu_425_p1));
    tmp_12_fu_622_p2 <= std_logic_vector(unsigned(j5_cast_fu_606_p1) + unsigned(y_cast_reg_771));
    tmp_13_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_622_p2),5));
    tmp_13_fu_465_p2 <= std_logic_vector(unsigned(tmp_cast9_fu_461_p1) + unsigned(ap_const_lv4_A));
    tmp_14_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_256),5));
    tmp_14_fu_388_p2 <= std_logic_vector(unsigned(tmp_7_reg_684) + unsigned(tmp_7_cast_fu_384_p1));
    tmp_15_fu_655_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_825) * signed(line_buffer_load_1_reg_820))), 32));
    tmp_16_fu_398_p2 <= std_logic_vector(unsigned(tmp_9_reg_689) + unsigned(tmp_7_cast_fu_384_p1));
    tmp_17_fu_443_p3 <= (x_reg_139 & ap_const_lv2_0);
    tmp_18_fu_455_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_451_p1) - unsigned(tmp_9_cast_fu_439_p1));
    tmp_19_fu_596_p2 <= std_logic_vector(unsigned(tmp_18_reg_735) + unsigned(tmp_10_cast_fu_592_p1));
    tmp_1_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_186),5));
    tmp_1_fu_504_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_488_p1) + unsigned(p_shl_cast_fu_500_p1));
    tmp_20_fu_568_p3 <= (i4_reg_233 & ap_const_lv2_0);
    tmp_21_fu_580_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_576_p1) - unsigned(tmp_11_cast_fu_564_p1));
    tmp_22_fu_586_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_564_p1) + unsigned(p_shl7_cast_fu_576_p1));
    tmp_23_fu_631_p2 <= std_logic_vector(unsigned(tmp_22_reg_797) + unsigned(tmp_13_cast_fu_627_p1));
    tmp_24_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_526_p2),64));
    tmp_24_fu_645_p2 <= std_logic_vector(unsigned(tmp_21_reg_792) + unsigned(tmp_14_cast_fu_641_p1));
    tmp_25_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_429_p2),64));
    tmp_26_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_465_p2),64));
    tmp_27_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_388_p2),64));
    tmp_28_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_712),64));
    tmp_2_fu_345_p2 <= std_logic_vector(unsigned(x_cast_reg_664) + unsigned(ap_const_lv3_2));
        tmp_31_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_596_p2),64));

    tmp_36_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_631_p2),64));
        tmp_37_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_645_p2),64));

    tmp_3_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_345_p2),6));
    tmp_3_fu_354_p3 <= (tmp_2_fu_345_p2 & ap_const_lv2_0);
    tmp_4_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_151),5));
    tmp_4_fu_366_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_350_p1) + unsigned(p_shl4_cast_fu_362_p1));
    tmp_5_fu_317_p2 <= std_logic_vector(unsigned(i1_reg_151) + unsigned(ap_const_lv2_3));
    tmp_6_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_317_p2),5));
    tmp_6_fu_299_p3 <= (i1_reg_151 & ap_const_lv2_0);
    tmp_7_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_163),5));
    tmp_7_fu_311_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_295_p1) + unsigned(p_shl3_cast_fu_307_p1));
    tmp_8_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_197),5));
    tmp_8_fu_327_p3 <= (tmp_5_fu_317_p2 & ap_const_lv2_0);
    tmp_9_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_139),5));
    tmp_9_fu_339_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_323_p1) + unsigned(p_shl2_cast_fu_335_p1));
    tmp_cast9_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_174),4));
    tmp_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_174),6));
    tmp_fu_283_p2 <= "1" when (x_reg_139 = ap_const_lv2_0) else "0";
    tmp_s_fu_492_p3 <= (i_reg_186 & ap_const_lv2_0);
    x_1_fu_277_p2 <= std_logic_vector(unsigned(x_reg_139) + unsigned(ap_const_lv2_1));
    x_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_139),3));
    y_1_fu_546_p2 <= std_logic_vector(unsigned(y_reg_208) + unsigned(ap_const_lv2_1));
    y_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_208),3));
end behav;
