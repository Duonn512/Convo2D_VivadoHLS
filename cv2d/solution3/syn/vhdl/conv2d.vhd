-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
generic (
    C_S_AXI_CV_IO_ADDR_WIDTH : INTEGER := 9;
    C_S_AXI_CV_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_cv_io_AWVALID : IN STD_LOGIC;
    s_axi_cv_io_AWREADY : OUT STD_LOGIC;
    s_axi_cv_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CV_IO_ADDR_WIDTH-1 downto 0);
    s_axi_cv_io_WVALID : IN STD_LOGIC;
    s_axi_cv_io_WREADY : OUT STD_LOGIC;
    s_axi_cv_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CV_IO_DATA_WIDTH-1 downto 0);
    s_axi_cv_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CV_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_cv_io_ARVALID : IN STD_LOGIC;
    s_axi_cv_io_ARREADY : OUT STD_LOGIC;
    s_axi_cv_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CV_IO_ADDR_WIDTH-1 downto 0);
    s_axi_cv_io_RVALID : OUT STD_LOGIC;
    s_axi_cv_io_RREADY : IN STD_LOGIC;
    s_axi_cv_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CV_IO_DATA_WIDTH-1 downto 0);
    s_axi_cv_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cv_io_BVALID : OUT STD_LOGIC;
    s_axi_cv_io_BREADY : IN STD_LOGIC;
    s_axi_cv_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=490,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=9,HLS_SYN_FF=1021,HLS_SYN_LUT=1489,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal x_cast_fu_558_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_cast_reg_1079 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal x_1_fu_568_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_1_reg_1087 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_1099 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1104 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_1_fu_603_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_1_reg_1117 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_1_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_1_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_1_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_635_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_1132 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_fu_647_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_1140 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond3_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_2_fu_673_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_2_reg_1153 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond6_2_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_1163 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_addr_1_reg_1168 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_addr_2_reg_1173 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_754_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1181 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_8_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1186 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_1_fu_771_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_1_reg_1199 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond6_1_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_808_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_1212 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_28_fu_830_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_reg_1217 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_842_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_1225 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_869_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sum_2_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_3_1_fu_897_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_1_reg_1268 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_30_fu_919_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_reg_1273 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_1_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_1_fu_931_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_1_reg_1281 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal exitcond_1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_958_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sum_2_1_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_3_2_fu_986_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_2_reg_1324 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_33_fu_1008_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_reg_1329 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_2_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_2_fu_1024_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_2_reg_1337 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal exitcond_2_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1057_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal sum_2_2_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal line_buffer_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_0_ce0 : STD_LOGIC;
    signal line_buffer_0_we0 : STD_LOGIC;
    signal line_buffer_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_1_ce0 : STD_LOGIC;
    signal line_buffer_1_we0 : STD_LOGIC;
    signal line_buffer_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal line_buffer_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal line_buffer_2_ce0 : STD_LOGIC;
    signal line_buffer_2_we0 : STD_LOGIC;
    signal line_buffer_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_329 : STD_LOGIC_VECTOR (1 downto 0);
    signal j2_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j2_1_reg_352 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j3_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_4_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_s_reg_398 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_423 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_reg_447 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_s_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_1_reg_471 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_1_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_1_reg_495 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_3_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_2_reg_519 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_1_2_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal j5_2_reg_543 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_cast_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_1_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_2_fu_1036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_614_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_623_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_cast_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_653_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_657_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_2_cast_fu_679_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_683_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_698_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_706_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_694_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_710_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_fu_721_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_732_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_1_cast_fu_777_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_781_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_fu_818_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_826_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_fu_814_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_fu_855_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_fu_907_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_915_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_1_cast_fu_903_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_1_cast_fu_944_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_fu_948_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_996_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl4_cast_fu_1004_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_2_cast_fu_992_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j5_2_cast_fu_1014_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_2_fu_1030_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_2_cast_fu_1043_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_1047_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component conv2d_mux_32_32_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_line_buffebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv2d_cv_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_r_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernel_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        kernel_ce0 : IN STD_LOGIC;
        kernel_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2d_cv_io_s_axi_U : component conv2d_cv_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CV_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CV_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cv_io_AWVALID,
        AWREADY => s_axi_cv_io_AWREADY,
        AWADDR => s_axi_cv_io_AWADDR,
        WVALID => s_axi_cv_io_WVALID,
        WREADY => s_axi_cv_io_WREADY,
        WDATA => s_axi_cv_io_WDATA,
        WSTRB => s_axi_cv_io_WSTRB,
        ARVALID => s_axi_cv_io_ARVALID,
        ARREADY => s_axi_cv_io_ARREADY,
        ARADDR => s_axi_cv_io_ARADDR,
        RVALID => s_axi_cv_io_RVALID,
        RREADY => s_axi_cv_io_RREADY,
        RDATA => s_axi_cv_io_RDATA,
        RRESP => s_axi_cv_io_RRESP,
        BVALID => s_axi_cv_io_BVALID,
        BREADY => s_axi_cv_io_BREADY,
        BRESP => s_axi_cv_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_r_address0 => input_r_address0,
        input_r_ce0 => input_r_ce0,
        input_r_q0 => input_r_q0,
        kernel_address0 => kernel_address0,
        kernel_ce0 => kernel_ce0,
        kernel_q0 => kernel_q0,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0);

    line_buffer_0_U : component conv2d_line_buffebkb
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_0_address0,
        ce0 => line_buffer_0_ce0,
        we0 => line_buffer_0_we0,
        d0 => line_buffer_0_d0,
        q0 => line_buffer_0_q0);

    line_buffer_1_U : component conv2d_line_buffebkb
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_1_address0,
        ce0 => line_buffer_1_ce0,
        we0 => line_buffer_1_we0,
        d0 => line_buffer_1_d0,
        q0 => line_buffer_1_q0);

    line_buffer_2_U : component conv2d_line_buffebkb
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => line_buffer_2_address0,
        ce0 => line_buffer_2_ce0,
        we0 => line_buffer_2_we0,
        d0 => input_r_q0,
        q0 => line_buffer_2_q0);

    conv2d_mux_32_32_eOg_U1 : component conv2d_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_0_q0,
        din1 => line_buffer_1_q0,
        din2 => line_buffer_2_q0,
        din3 => i4_reg_423,
        dout => tmp_18_fu_869_p5);

    conv2d_mux_32_32_eOg_U2 : component conv2d_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_0_q0,
        din1 => line_buffer_1_q0,
        din2 => line_buffer_2_q0,
        din3 => i4_1_reg_471,
        dout => tmp_19_fu_958_p5);

    conv2d_mux_32_32_eOg_U3 : component conv2d_mux_32_32_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => line_buffer_0_q0,
        din1 => line_buffer_1_q0,
        din2 => line_buffer_2_q0,
        din3 => i4_2_reg_519,
        dout => tmp_20_fu_1057_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i4_1_reg_471_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_1_fu_925_p2 = ap_const_lv1_1))) then 
                i4_1_reg_471 <= i_3_1_reg_1268;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_1))) then 
                i4_1_reg_471 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i4_2_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_2_fu_1018_p2 = ap_const_lv1_1))) then 
                i4_2_reg_519 <= i_3_2_reg_1324;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_1))) then 
                i4_2_reg_519 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i4_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_836_p2 = ap_const_lv1_1))) then 
                i4_reg_423 <= i_3_reg_1212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (((exitcond6_2_fu_667_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_1)) or ((exitcond3_fu_641_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_0))))) then 
                i4_reg_423 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j2_1_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j2_1_reg_352 <= j_3_1_reg_1117;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_580_p2 = ap_const_lv1_1))) then 
                j2_1_reg_352 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j2_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j2_reg_341 <= j_3_reg_1099;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_0) and (tmp_fu_574_p2 = ap_const_lv1_0))) then 
                j2_reg_341 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j3_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4_1_fu_597_p2 = ap_const_lv1_1))) then 
                j3_reg_363 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j3_reg_363 <= j_2_reg_1140;
            end if; 
        end if;
    end process;

    j5_1_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_0))) then 
                j5_1_reg_495 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                j5_1_reg_495 <= tmp_12_1_reg_1281;
            end if; 
        end if;
    end process;

    j5_2_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_0))) then 
                j5_2_reg_543 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                j5_2_reg_543 <= j_4_2_reg_1337;
            end if; 
        end if;
    end process;

    j5_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_0))) then 
                j5_reg_447 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j5_reg_447 <= j_5_reg_1225;
            end if; 
        end if;
    end process;

    j_4_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_4_reg_375 <= j_1_2_reg_1153;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond6_1_fu_765_p2 = ap_const_lv1_1))) then 
                j_4_reg_375 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_387 <= j_1_reg_1181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_0) and (tmp_fu_574_p2 = ap_const_lv1_1))) then 
                j_reg_387 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_s_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_s_reg_398 <= j_1_1_reg_1199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond6_fu_748_p2 = ap_const_lv1_1))) then 
                j_s_reg_398 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    sum_1_1_reg_483_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_0))) then 
                sum_1_1_reg_483 <= sum_s_reg_458;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                sum_1_1_reg_483 <= sum_2_1_fu_975_p2;
            end if; 
        end if;
    end process;

    sum_1_2_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_0))) then 
                sum_1_2_reg_531 <= sum_3_reg_506;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                sum_1_2_reg_531 <= sum_2_2_fu_1074_p2;
            end if; 
        end if;
    end process;

    sum_1_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_0))) then 
                sum_1_reg_435 <= sum_reg_410;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                sum_1_reg_435 <= sum_2_fu_886_p2;
            end if; 
        end if;
    end process;

    sum_3_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_2_fu_1018_p2 = ap_const_lv1_1))) then 
                sum_3_reg_506 <= sum_1_2_reg_531;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_1))) then 
                sum_3_reg_506 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_836_p2 = ap_const_lv1_1))) then 
                sum_reg_410 <= sum_1_reg_435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (((exitcond6_2_fu_667_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_1)) or ((exitcond3_fu_641_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_0))))) then 
                sum_reg_410 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_s_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_1_fu_925_p2 = ap_const_lv1_1))) then 
                sum_s_reg_458 <= sum_1_1_reg_483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_1))) then 
                sum_s_reg_458 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_1))) then 
                x_reg_329 <= x_1_reg_1087;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_329 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_3_1_reg_1268 <= i_3_1_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_3_2_reg_1324 <= i_3_2_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_3_reg_1212 <= i_3_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_1_1_reg_1199 <= j_1_1_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_1092 = ap_const_lv1_1))) then
                j_1_2_reg_1153 <= j_1_2_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_1_reg_1181 <= j_1_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_reg_1092 = ap_const_lv1_0))) then
                j_2_reg_1140 <= j_2_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_3_1_reg_1117 <= j_3_1_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_1099 <= j_3_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                j_4_2_reg_1337 <= j_4_2_fu_1024_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_5_reg_1225 <= j_5_fu_842_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((exitcond6_2_fu_667_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_1)) or ((exitcond3_fu_641_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_0))))) then
                output_addr_1_reg_1168 <= tmp_28_cast_fu_727_p1(4 - 1 downto 0);
                output_addr_2_reg_1173 <= tmp_29_cast_fu_738_p1(4 - 1 downto 0);
                output_addr_reg_1163 <= tmp_27_cast_fu_716_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_554 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp_12_1_reg_1281 <= tmp_12_1_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_15_1_reg_1311 <= tmp_15_1_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp_15_2_reg_1367 <= tmp_15_2_fu_1069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_15_reg_1255 <= tmp_15_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4_1_fu_597_p2 = ap_const_lv1_1))) then
                tmp_16_reg_1132 <= tmp_16_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_18_reg_1250 <= tmp_18_fu_869_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_19_reg_1306 <= tmp_19_fu_958_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_20_reg_1362 <= tmp_20_fu_1057_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_0))) then
                tmp_28_reg_1217 <= tmp_28_fu_830_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_0))) then
                tmp_30_reg_1273 <= tmp_30_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_0))) then
                tmp_33_reg_1329 <= tmp_33_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_580_p2 = ap_const_lv1_0))) then
                    tmp_3_reg_1104(2 downto 0) <= tmp_3_fu_592_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4_1_fu_597_p2 = ap_const_lv1_0))) then
                    tmp_7_1_reg_1122(2 downto 0) <= tmp_7_1_fu_609_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond6_fu_748_p2 = ap_const_lv1_0))) then
                    tmp_8_reg_1186(2 downto 0) <= tmp_8_fu_760_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_0))) then
                tmp_reg_1092 <= tmp_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_1_reg_1087 <= x_1_fu_568_p2;
                    x_cast_reg_1079(1 downto 0) <= x_cast_fu_558_p1(1 downto 0);
            end if;
        end if;
    end process;
    x_cast_reg_1079(2) <= '0';
    tmp_3_reg_1104(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_7_1_reg_1122(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_8_reg_1186(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_574_p2, tmp_reg_1092, exitcond8_fu_562_p2, ap_CS_fsm_state3, exitcond4_fu_580_p2, ap_CS_fsm_state5, exitcond4_1_fu_597_p2, ap_CS_fsm_state7, exitcond3_fu_641_p2, exitcond6_2_fu_667_p2, ap_CS_fsm_state9, exitcond6_fu_748_p2, ap_CS_fsm_state11, exitcond6_1_fu_765_p2, ap_CS_fsm_state14, exitcond1_fu_802_p2, ap_CS_fsm_state15, exitcond_fu_836_p2, ap_CS_fsm_state19, exitcond1_1_fu_891_p2, ap_CS_fsm_state20, exitcond_1_fu_925_p2, ap_CS_fsm_state24, exitcond1_2_fu_980_p2, ap_CS_fsm_state25, exitcond_2_fu_1018_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_0) and (tmp_fu_574_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_580_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond4_1_fu_597_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (((exitcond6_2_fu_667_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_1)) or ((exitcond3_fu_641_p2 = ap_const_lv1_1) and (tmp_reg_1092 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_2_fu_667_p2 = ap_const_lv1_0) and (tmp_reg_1092 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond6_fu_748_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond6_1_fu_765_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_fu_836_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_1_fu_925_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (exitcond_2_fu_1018_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_562_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_562_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_562_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_1_fu_891_p2 <= "1" when (i4_1_reg_471 = ap_const_lv2_3) else "0";
    exitcond1_2_fu_980_p2 <= "1" when (i4_2_reg_519 = ap_const_lv2_3) else "0";
    exitcond1_fu_802_p2 <= "1" when (i4_reg_423 = ap_const_lv2_3) else "0";
    exitcond3_fu_641_p2 <= "1" when (j3_reg_363 = ap_const_lv3_5) else "0";
    exitcond4_1_fu_597_p2 <= "1" when (j2_1_reg_352 = ap_const_lv3_5) else "0";
    exitcond4_fu_580_p2 <= "1" when (j2_reg_341 = ap_const_lv3_5) else "0";
    exitcond6_1_fu_765_p2 <= "1" when (j_s_reg_398 = ap_const_lv3_5) else "0";
    exitcond6_2_fu_667_p2 <= "1" when (j_4_reg_375 = ap_const_lv3_5) else "0";
    exitcond6_fu_748_p2 <= "1" when (j_reg_387 = ap_const_lv3_5) else "0";
    exitcond8_fu_562_p2 <= "1" when (x_reg_329 = ap_const_lv2_3) else "0";
    exitcond_1_fu_925_p2 <= "1" when (j5_1_reg_495 = ap_const_lv2_3) else "0";
    exitcond_2_fu_1018_p2 <= "1" when (j5_2_reg_543 = ap_const_lv2_3) else "0";
    exitcond_fu_836_p2 <= "1" when (j5_reg_447 = ap_const_lv2_3) else "0";
    i_3_1_fu_897_p2 <= std_logic_vector(unsigned(i4_1_reg_471) + unsigned(ap_const_lv2_1));
    i_3_2_fu_986_p2 <= std_logic_vector(unsigned(i4_2_reg_519) + unsigned(ap_const_lv2_1));
    i_3_fu_808_p2 <= std_logic_vector(unsigned(i4_reg_423) + unsigned(ap_const_lv2_1));

    input_r_address0_assign_proc : process(tmp_reg_1092, ap_CS_fsm_state7, exitcond3_fu_641_p2, exitcond6_2_fu_667_p2, ap_CS_fsm_state9, tmp_8_fu_760_p1, ap_CS_fsm_state11, tmp_25_cast_fu_662_p1, tmp_24_cast_fu_689_p1, tmp_21_cast_fu_787_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= tmp_21_cast_fu_787_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_8_fu_760_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_2_fu_667_p2 = ap_const_lv1_0) and (tmp_reg_1092 = ap_const_lv1_1))) then 
            input_r_address0 <= tmp_24_cast_fu_689_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond3_fu_641_p2 = ap_const_lv1_0) and (tmp_reg_1092 = ap_const_lv1_0))) then 
            input_r_address0 <= tmp_25_cast_fu_662_p1(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(tmp_reg_1092, ap_CS_fsm_state7, exitcond3_fu_641_p2, exitcond6_2_fu_667_p2, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond6_2_fu_667_p2 = ap_const_lv1_0) and (tmp_reg_1092 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond3_fu_641_p2 = ap_const_lv1_0) and (tmp_reg_1092 = ap_const_lv1_0)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j5_2_cast_fu_1014_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_2_reg_543),3));
    j_1_1_fu_771_p2 <= std_logic_vector(unsigned(j_s_reg_398) + unsigned(ap_const_lv3_1));
    j_1_2_fu_673_p2 <= std_logic_vector(unsigned(j_4_reg_375) + unsigned(ap_const_lv3_1));
    j_1_fu_754_p2 <= std_logic_vector(unsigned(j_reg_387) + unsigned(ap_const_lv3_1));
    j_2_fu_647_p2 <= std_logic_vector(unsigned(j3_reg_363) + unsigned(ap_const_lv3_1));
    j_3_1_fu_603_p2 <= std_logic_vector(unsigned(j2_1_reg_352) + unsigned(ap_const_lv3_1));
    j_3_fu_586_p2 <= std_logic_vector(unsigned(j2_reg_341) + unsigned(ap_const_lv3_1));
    j_4_2_fu_1024_p2 <= std_logic_vector(unsigned(j5_2_reg_543) + unsigned(ap_const_lv2_1));
    j_5_fu_842_p2 <= std_logic_vector(unsigned(j5_reg_447) + unsigned(ap_const_lv2_1));

    kernel_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, tmp_34_cast_fu_864_p1, tmp_37_cast_fu_953_p1, tmp_38_cast_fu_1052_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            kernel_address0 <= tmp_38_cast_fu_1052_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            kernel_address0 <= tmp_37_cast_fu_953_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            kernel_address0 <= tmp_34_cast_fu_864_p1(4 - 1 downto 0);
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_address0_assign_proc : process(tmp_3_reg_1104, tmp_8_reg_1186, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_17_fu_848_p1, tmp_13_1_fu_937_p1, tmp_13_2_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            line_buffer_0_address0 <= tmp_13_2_fu_1036_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            line_buffer_0_address0 <= tmp_13_1_fu_937_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            line_buffer_0_address0 <= tmp_17_fu_848_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            line_buffer_0_address0 <= tmp_8_reg_1186(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_buffer_0_address0 <= tmp_3_reg_1104(3 - 1 downto 0);
        else 
            line_buffer_0_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_0_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            line_buffer_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_d0_assign_proc : process(input_r_q0, line_buffer_1_q0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            line_buffer_0_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            line_buffer_0_d0 <= line_buffer_1_q0;
        else 
            line_buffer_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buffer_0_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            line_buffer_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_address0_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_592_p1, tmp_7_1_reg_1122, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state12, tmp_8_1_fu_792_p1, tmp_17_fu_848_p1, tmp_13_1_fu_937_p1, tmp_13_2_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            line_buffer_1_address0 <= tmp_13_2_fu_1036_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            line_buffer_1_address0 <= tmp_13_1_fu_937_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            line_buffer_1_address0 <= tmp_17_fu_848_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            line_buffer_1_address0 <= tmp_8_1_fu_792_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_address0 <= tmp_7_1_reg_1122(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            line_buffer_1_address0 <= tmp_3_fu_592_p1(3 - 1 downto 0);
        else 
            line_buffer_1_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            line_buffer_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_d0_assign_proc : process(input_r_q0, line_buffer_2_q0, ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            line_buffer_1_d0 <= input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            line_buffer_1_d0 <= line_buffer_2_q0;
        else 
            line_buffer_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    line_buffer_1_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            line_buffer_1_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_address0_assign_proc : process(ap_CS_fsm_state5, tmp_7_1_fu_609_p1, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state8, ap_CS_fsm_state13, tmp_s_fu_743_p1, tmp_8_2_fu_797_p1, tmp_17_fu_848_p1, tmp_13_1_fu_937_p1, tmp_13_2_fu_1036_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            line_buffer_2_address0 <= tmp_13_2_fu_1036_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            line_buffer_2_address0 <= tmp_13_1_fu_937_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            line_buffer_2_address0 <= tmp_17_fu_848_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            line_buffer_2_address0 <= tmp_8_2_fu_797_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            line_buffer_2_address0 <= tmp_s_fu_743_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line_buffer_2_address0 <= tmp_7_1_fu_609_p1(3 - 1 downto 0);
        else 
            line_buffer_2_address0 <= "XXX";
        end if; 
    end process;


    line_buffer_2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            line_buffer_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_2_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            line_buffer_2_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(output_addr_reg_1163, output_addr_1_reg_1168, output_addr_2_reg_1173, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_address0 <= output_addr_2_reg_1173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_address0 <= output_addr_1_reg_1168;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= output_addr_reg_1163;
        else 
            output_r_address0 <= "XXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state24, sum_reg_410, sum_s_reg_458, sum_3_reg_506)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            output_r_d0 <= sum_3_reg_506;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= sum_s_reg_458;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= sum_reg_410;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state14, exitcond1_fu_802_p2, ap_CS_fsm_state19, exitcond1_1_fu_891_p2, ap_CS_fsm_state24, exitcond1_2_fu_980_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond1_2_fu_980_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (exitcond1_1_fu_891_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_fu_802_p2 = ap_const_lv1_1)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_698_p3),5));
    p_shl2_cast_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_818_p3),5));
    p_shl3_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_907_p3),5));
    p_shl4_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_996_p3),5));
    p_shl_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_623_p3),6));
    sum_2_1_fu_975_p2 <= std_logic_vector(unsigned(sum_1_1_reg_483) + unsigned(tmp_15_1_reg_1311));
    sum_2_2_fu_1074_p2 <= std_logic_vector(unsigned(sum_1_2_reg_531) + unsigned(tmp_15_2_reg_1367));
    sum_2_fu_886_p2 <= std_logic_vector(unsigned(sum_1_reg_435) + unsigned(tmp_15_reg_1255));
    tmp_10_fu_781_p2 <= std_logic_vector(unsigned(tmp_8_1_cast_fu_777_p1) + unsigned(ap_const_lv4_5));
    tmp_11_1_cast_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_1_reg_471),5));
    tmp_11_2_cast_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_2_reg_519),5));
    tmp_12_1_fu_931_p2 <= std_logic_vector(unsigned(j5_1_reg_495) + unsigned(ap_const_lv2_1));
    tmp_12_2_fu_1030_p2 <= std_logic_vector(unsigned(j5_2_cast_fu_1014_p1) + unsigned(ap_const_lv3_2));
    tmp_13_1_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_1_fu_931_p2),64));
    tmp_13_2_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_2_fu_1030_p2),64));
    tmp_14_1_cast_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_1_reg_495),5));
    tmp_14_2_cast_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_2_reg_543),5));
    tmp_14_fu_623_p3 <= (tmp_2_fu_614_p2 & ap_const_lv2_0);
    tmp_15_1_fu_970_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_19_reg_1306) * signed(reg_554))), 32));
    tmp_15_2_fu_1069_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_20_reg_1362) * signed(reg_554))), 32));
    tmp_15_fu_881_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_18_reg_1250) * signed(reg_554))), 32));
    tmp_16_cast_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_423),5));
    tmp_16_fu_635_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_619_p1) + unsigned(p_shl_cast_fu_631_p1));
    tmp_17_cast_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_447),5));
    tmp_17_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_447),64));
    tmp_21_cast_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_781_p2),64));
    tmp_21_fu_683_p2 <= std_logic_vector(unsigned(tmp_8_2_cast_fu_679_p1) + unsigned(ap_const_lv4_A));
    tmp_22_fu_657_p2 <= std_logic_vector(unsigned(tmp_16_reg_1132) + unsigned(tmp_cast_fu_653_p1));
    tmp_23_fu_698_p3 <= (x_reg_329 & ap_const_lv2_0);
    tmp_24_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_683_p2),64));
    tmp_24_fu_710_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_706_p1) - unsigned(tmp_9_cast_fu_694_p1));
    tmp_25_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_657_p2),64));
    tmp_25_fu_721_p2 <= std_logic_vector(signed(tmp_24_fu_710_p2) + signed(ap_const_lv5_1));
    tmp_26_fu_732_p2 <= std_logic_vector(signed(tmp_24_fu_710_p2) + signed(ap_const_lv5_2));
        tmp_27_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_710_p2),64));

    tmp_27_fu_818_p3 <= (i4_reg_423 & ap_const_lv2_0);
        tmp_28_cast_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_721_p2),64));

    tmp_28_fu_830_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_826_p1) - unsigned(tmp_16_cast_fu_814_p1));
        tmp_29_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_26_fu_732_p2),64));

    tmp_29_fu_907_p3 <= (i4_1_reg_471 & ap_const_lv2_0);
    tmp_2_fu_614_p2 <= std_logic_vector(unsigned(x_cast_reg_1079) + unsigned(ap_const_lv3_2));
    tmp_30_fu_919_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_915_p1) - unsigned(tmp_11_1_cast_fu_903_p1));
    tmp_31_fu_859_p2 <= std_logic_vector(unsigned(tmp_28_reg_1217) + unsigned(tmp_17_cast_fu_855_p1));
    tmp_32_fu_996_p3 <= (i4_2_reg_519 & ap_const_lv2_0);
    tmp_33_fu_1008_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1004_p1) - unsigned(tmp_11_2_cast_fu_992_p1));
        tmp_34_cast_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_859_p2),64));

    tmp_34_fu_948_p2 <= std_logic_vector(unsigned(tmp_30_reg_1273) + unsigned(tmp_14_1_cast_fu_944_p1));
    tmp_35_fu_1047_p2 <= std_logic_vector(unsigned(tmp_33_reg_1329) + unsigned(tmp_14_2_cast_fu_1043_p1));
        tmp_37_cast_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_fu_948_p2),64));

        tmp_38_cast_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_1047_p2),64));

    tmp_3_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_614_p2),6));
    tmp_3_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_341),64));
    tmp_7_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_1_reg_352),64));
    tmp_8_1_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_s_reg_398),4));
    tmp_8_1_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_s_reg_398),64));
    tmp_8_2_cast_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_375),4));
    tmp_8_2_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_375),64));
    tmp_8_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_387),64));
    tmp_9_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_329),5));
    tmp_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_363),6));
    tmp_fu_574_p2 <= "1" when (x_reg_329 = ap_const_lv2_0) else "0";
    tmp_s_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_363),64));
    x_1_fu_568_p2 <= std_logic_vector(unsigned(x_reg_329) + unsigned(ap_const_lv2_1));
    x_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_329),3));
end behav;
