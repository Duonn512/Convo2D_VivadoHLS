// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=490,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=9,HLS_SYN_FF=1021,HLS_SYN_LUT=1489,HLS_VERSION=2018_3}" *)

module conv2d (
        ap_clk,
        ap_rst_n,
        s_axi_cv_io_AWVALID,
        s_axi_cv_io_AWREADY,
        s_axi_cv_io_AWADDR,
        s_axi_cv_io_WVALID,
        s_axi_cv_io_WREADY,
        s_axi_cv_io_WDATA,
        s_axi_cv_io_WSTRB,
        s_axi_cv_io_ARVALID,
        s_axi_cv_io_ARREADY,
        s_axi_cv_io_ARADDR,
        s_axi_cv_io_RVALID,
        s_axi_cv_io_RREADY,
        s_axi_cv_io_RDATA,
        s_axi_cv_io_RRESP,
        s_axi_cv_io_BVALID,
        s_axi_cv_io_BREADY,
        s_axi_cv_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CV_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_CV_IO_ADDR_WIDTH = 9;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CV_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_cv_io_AWVALID;
output   s_axi_cv_io_AWREADY;
input  [C_S_AXI_CV_IO_ADDR_WIDTH - 1:0] s_axi_cv_io_AWADDR;
input   s_axi_cv_io_WVALID;
output   s_axi_cv_io_WREADY;
input  [C_S_AXI_CV_IO_DATA_WIDTH - 1:0] s_axi_cv_io_WDATA;
input  [C_S_AXI_CV_IO_WSTRB_WIDTH - 1:0] s_axi_cv_io_WSTRB;
input   s_axi_cv_io_ARVALID;
output   s_axi_cv_io_ARREADY;
input  [C_S_AXI_CV_IO_ADDR_WIDTH - 1:0] s_axi_cv_io_ARADDR;
output   s_axi_cv_io_RVALID;
input   s_axi_cv_io_RREADY;
output  [C_S_AXI_CV_IO_DATA_WIDTH - 1:0] s_axi_cv_io_RDATA;
output  [1:0] s_axi_cv_io_RRESP;
output   s_axi_cv_io_BVALID;
input   s_axi_cv_io_BREADY;
output  [1:0] s_axi_cv_io_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [4:0] input_r_address0;
reg    input_r_ce0;
wire   [31:0] input_r_q0;
reg   [3:0] kernel_address0;
reg    kernel_ce0;
wire   [31:0] kernel_q0;
reg   [3:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [31:0] output_r_d0;
reg  signed [31:0] reg_554;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire   [2:0] x_cast_fu_558_p1;
reg   [2:0] x_cast_reg_1079;
wire    ap_CS_fsm_state2;
wire   [1:0] x_1_fu_568_p2;
reg   [1:0] x_1_reg_1087;
wire   [0:0] tmp_fu_574_p2;
reg   [0:0] tmp_reg_1092;
wire   [0:0] exitcond8_fu_562_p2;
wire   [2:0] j_3_fu_586_p2;
reg   [2:0] j_3_reg_1099;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_3_fu_592_p1;
reg   [63:0] tmp_3_reg_1104;
wire   [0:0] exitcond4_fu_580_p2;
wire   [2:0] j_3_1_fu_603_p2;
reg   [2:0] j_3_1_reg_1117;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_7_1_fu_609_p1;
reg   [63:0] tmp_7_1_reg_1122;
wire   [0:0] exitcond4_1_fu_597_p2;
wire   [5:0] tmp_16_fu_635_p2;
reg   [5:0] tmp_16_reg_1132;
wire   [2:0] j_2_fu_647_p2;
reg   [2:0] j_2_reg_1140;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_641_p2;
wire   [2:0] j_1_2_fu_673_p2;
reg   [2:0] j_1_2_reg_1153;
wire   [0:0] exitcond6_2_fu_667_p2;
reg   [3:0] output_addr_reg_1163;
reg   [3:0] output_addr_1_reg_1168;
reg   [3:0] output_addr_2_reg_1173;
wire   [2:0] j_1_fu_754_p2;
reg   [2:0] j_1_reg_1181;
wire    ap_CS_fsm_state9;
wire   [63:0] tmp_8_fu_760_p1;
reg   [63:0] tmp_8_reg_1186;
wire   [0:0] exitcond6_fu_748_p2;
wire   [2:0] j_1_1_fu_771_p2;
reg   [2:0] j_1_1_reg_1199;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond6_1_fu_765_p2;
wire   [1:0] i_3_fu_808_p2;
reg   [1:0] i_3_reg_1212;
wire    ap_CS_fsm_state14;
wire   [4:0] tmp_28_fu_830_p2;
reg   [4:0] tmp_28_reg_1217;
wire   [0:0] exitcond1_fu_802_p2;
wire   [1:0] j_5_fu_842_p2;
reg   [1:0] j_5_reg_1225;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond_fu_836_p2;
wire  signed [31:0] tmp_18_fu_869_p5;
reg  signed [31:0] tmp_18_reg_1250;
wire   [31:0] tmp_15_fu_881_p2;
reg   [31:0] tmp_15_reg_1255;
wire    ap_CS_fsm_state17;
wire   [31:0] sum_2_fu_886_p2;
wire    ap_CS_fsm_state18;
wire   [1:0] i_3_1_fu_897_p2;
reg   [1:0] i_3_1_reg_1268;
wire    ap_CS_fsm_state19;
wire   [4:0] tmp_30_fu_919_p2;
reg   [4:0] tmp_30_reg_1273;
wire   [0:0] exitcond1_1_fu_891_p2;
wire   [1:0] tmp_12_1_fu_931_p2;
reg   [1:0] tmp_12_1_reg_1281;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond_1_fu_925_p2;
wire  signed [31:0] tmp_19_fu_958_p5;
reg  signed [31:0] tmp_19_reg_1306;
wire   [31:0] tmp_15_1_fu_970_p2;
reg   [31:0] tmp_15_1_reg_1311;
wire    ap_CS_fsm_state22;
wire   [31:0] sum_2_1_fu_975_p2;
wire    ap_CS_fsm_state23;
wire   [1:0] i_3_2_fu_986_p2;
reg   [1:0] i_3_2_reg_1324;
wire    ap_CS_fsm_state24;
wire   [4:0] tmp_33_fu_1008_p2;
reg   [4:0] tmp_33_reg_1329;
wire   [0:0] exitcond1_2_fu_980_p2;
wire   [1:0] j_4_2_fu_1024_p2;
reg   [1:0] j_4_2_reg_1337;
wire    ap_CS_fsm_state25;
wire   [0:0] exitcond_2_fu_1018_p2;
wire  signed [31:0] tmp_20_fu_1057_p5;
reg  signed [31:0] tmp_20_reg_1362;
wire   [31:0] tmp_15_2_fu_1069_p2;
reg   [31:0] tmp_15_2_reg_1367;
wire    ap_CS_fsm_state27;
wire   [31:0] sum_2_2_fu_1074_p2;
wire    ap_CS_fsm_state28;
reg   [2:0] line_buffer_0_address0;
reg    line_buffer_0_ce0;
reg    line_buffer_0_we0;
reg   [31:0] line_buffer_0_d0;
wire   [31:0] line_buffer_0_q0;
reg   [2:0] line_buffer_1_address0;
reg    line_buffer_1_ce0;
reg    line_buffer_1_we0;
reg   [31:0] line_buffer_1_d0;
wire   [31:0] line_buffer_1_q0;
reg   [2:0] line_buffer_2_address0;
reg    line_buffer_2_ce0;
reg    line_buffer_2_we0;
wire   [31:0] line_buffer_2_q0;
reg   [1:0] x_reg_329;
reg   [2:0] j2_reg_341;
wire    ap_CS_fsm_state4;
reg   [2:0] j2_1_reg_352;
wire    ap_CS_fsm_state6;
reg   [2:0] j3_reg_363;
wire    ap_CS_fsm_state8;
reg   [2:0] j_4_reg_375;
wire    ap_CS_fsm_state13;
reg   [2:0] j_reg_387;
wire    ap_CS_fsm_state10;
reg   [2:0] j_s_reg_398;
wire    ap_CS_fsm_state12;
reg   [31:0] sum_reg_410;
reg   [1:0] i4_reg_423;
reg   [31:0] sum_1_reg_435;
reg   [1:0] j5_reg_447;
reg   [31:0] sum_s_reg_458;
reg   [1:0] i4_1_reg_471;
reg   [31:0] sum_1_1_reg_483;
reg   [1:0] j5_1_reg_495;
reg   [31:0] sum_3_reg_506;
reg   [1:0] i4_2_reg_519;
reg   [31:0] sum_1_2_reg_531;
reg   [1:0] j5_2_reg_543;
wire   [63:0] tmp_25_cast_fu_662_p1;
wire   [63:0] tmp_24_cast_fu_689_p1;
wire  signed [63:0] tmp_27_cast_fu_716_p1;
wire  signed [63:0] tmp_28_cast_fu_727_p1;
wire  signed [63:0] tmp_29_cast_fu_738_p1;
wire   [63:0] tmp_s_fu_743_p1;
wire   [63:0] tmp_21_cast_fu_787_p1;
wire   [63:0] tmp_8_1_fu_792_p1;
wire   [63:0] tmp_8_2_fu_797_p1;
wire  signed [63:0] tmp_34_cast_fu_864_p1;
wire   [63:0] tmp_17_fu_848_p1;
wire   [63:0] tmp_13_1_fu_937_p1;
wire  signed [63:0] tmp_37_cast_fu_953_p1;
wire   [63:0] tmp_13_2_fu_1036_p1;
wire  signed [63:0] tmp_38_cast_fu_1052_p1;
wire   [2:0] tmp_2_fu_614_p2;
wire   [4:0] tmp_14_fu_623_p3;
wire   [5:0] tmp_3_cast_fu_619_p1;
wire   [5:0] p_shl_cast_fu_631_p1;
wire   [5:0] tmp_cast_fu_653_p1;
wire   [5:0] tmp_22_fu_657_p2;
wire   [3:0] tmp_8_2_cast_fu_679_p1;
wire   [3:0] tmp_21_fu_683_p2;
wire   [3:0] tmp_23_fu_698_p3;
wire   [4:0] p_shl1_cast_fu_706_p1;
wire   [4:0] tmp_9_cast_fu_694_p1;
wire  signed [4:0] tmp_24_fu_710_p2;
wire   [4:0] tmp_25_fu_721_p2;
wire   [4:0] tmp_26_fu_732_p2;
wire   [3:0] tmp_8_1_cast_fu_777_p1;
wire   [3:0] tmp_10_fu_781_p2;
wire   [3:0] tmp_27_fu_818_p3;
wire   [4:0] p_shl2_cast_fu_826_p1;
wire   [4:0] tmp_16_cast_fu_814_p1;
wire   [4:0] tmp_17_cast_fu_855_p1;
wire   [4:0] tmp_31_fu_859_p2;
wire   [3:0] tmp_29_fu_907_p3;
wire   [4:0] p_shl3_cast_fu_915_p1;
wire   [4:0] tmp_11_1_cast_fu_903_p1;
wire   [4:0] tmp_14_1_cast_fu_944_p1;
wire   [4:0] tmp_34_fu_948_p2;
wire   [3:0] tmp_32_fu_996_p3;
wire   [4:0] p_shl4_cast_fu_1004_p1;
wire   [4:0] tmp_11_2_cast_fu_992_p1;
wire   [2:0] j5_2_cast_fu_1014_p1;
wire   [2:0] tmp_12_2_fu_1030_p2;
wire   [4:0] tmp_14_2_cast_fu_1043_p1;
wire   [4:0] tmp_35_fu_1047_p2;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
end

conv2d_cv_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CV_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CV_IO_DATA_WIDTH ))
conv2d_cv_io_s_axi_U(
    .AWVALID(s_axi_cv_io_AWVALID),
    .AWREADY(s_axi_cv_io_AWREADY),
    .AWADDR(s_axi_cv_io_AWADDR),
    .WVALID(s_axi_cv_io_WVALID),
    .WREADY(s_axi_cv_io_WREADY),
    .WDATA(s_axi_cv_io_WDATA),
    .WSTRB(s_axi_cv_io_WSTRB),
    .ARVALID(s_axi_cv_io_ARVALID),
    .ARREADY(s_axi_cv_io_ARREADY),
    .ARADDR(s_axi_cv_io_ARADDR),
    .RVALID(s_axi_cv_io_RVALID),
    .RREADY(s_axi_cv_io_RREADY),
    .RDATA(s_axi_cv_io_RDATA),
    .RRESP(s_axi_cv_io_RRESP),
    .BVALID(s_axi_cv_io_BVALID),
    .BREADY(s_axi_cv_io_BREADY),
    .BRESP(s_axi_cv_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r_address0(input_r_address0),
    .input_r_ce0(input_r_ce0),
    .input_r_q0(input_r_q0),
    .kernel_address0(kernel_address0),
    .kernel_ce0(kernel_ce0),
    .kernel_q0(kernel_q0),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0)
);

conv2d_line_buffebkb #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
line_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_0_address0),
    .ce0(line_buffer_0_ce0),
    .we0(line_buffer_0_we0),
    .d0(line_buffer_0_d0),
    .q0(line_buffer_0_q0)
);

conv2d_line_buffebkb #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
line_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_1_address0),
    .ce0(line_buffer_1_ce0),
    .we0(line_buffer_1_we0),
    .d0(line_buffer_1_d0),
    .q0(line_buffer_1_q0)
);

conv2d_line_buffebkb #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
line_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(line_buffer_2_address0),
    .ce0(line_buffer_2_ce0),
    .we0(line_buffer_2_we0),
    .d0(input_r_q0),
    .q0(line_buffer_2_q0)
);

conv2d_mux_32_32_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
conv2d_mux_32_32_eOg_U1(
    .din0(line_buffer_0_q0),
    .din1(line_buffer_1_q0),
    .din2(line_buffer_2_q0),
    .din3(i4_reg_423),
    .dout(tmp_18_fu_869_p5)
);

conv2d_mux_32_32_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
conv2d_mux_32_32_eOg_U2(
    .din0(line_buffer_0_q0),
    .din1(line_buffer_1_q0),
    .din2(line_buffer_2_q0),
    .din3(i4_1_reg_471),
    .dout(tmp_19_fu_958_p5)
);

conv2d_mux_32_32_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
conv2d_mux_32_32_eOg_U3(
    .din0(line_buffer_0_q0),
    .din1(line_buffer_1_q0),
    .din2(line_buffer_2_q0),
    .din3(i4_2_reg_519),
    .dout(tmp_20_fu_1057_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond_1_fu_925_p2 == 1'd1))) begin
        i4_1_reg_471 <= i_3_1_reg_1268;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd1))) begin
        i4_1_reg_471 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond_2_fu_1018_p2 == 1'd1))) begin
        i4_2_reg_519 <= i_3_2_reg_1324;
    end else if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd1))) begin
        i4_2_reg_519 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_836_p2 == 1'd1))) begin
        i4_reg_423 <= i_3_reg_1212;
    end else if (((1'b1 == ap_CS_fsm_state7) & (((exitcond6_2_fu_667_p2 == 1'd1) & (tmp_reg_1092 == 1'd1)) | ((exitcond3_fu_641_p2 == 1'd1) & (tmp_reg_1092 == 1'd0))))) begin
        i4_reg_423 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j2_1_reg_352 <= j_3_1_reg_1117;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_580_p2 == 1'd1))) begin
        j2_1_reg_352 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j2_reg_341 <= j_3_reg_1099;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd0) & (tmp_fu_574_p2 == 1'd0))) begin
        j2_reg_341 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_1_fu_597_p2 == 1'd1))) begin
        j3_reg_363 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j3_reg_363 <= j_2_reg_1140;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd0))) begin
        j5_1_reg_495 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        j5_1_reg_495 <= tmp_12_1_reg_1281;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd0))) begin
        j5_2_reg_543 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        j5_2_reg_543 <= j_4_2_reg_1337;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd0))) begin
        j5_reg_447 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j5_reg_447 <= j_5_reg_1225;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_4_reg_375 <= j_1_2_reg_1153;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond6_1_fu_765_p2 == 1'd1))) begin
        j_4_reg_375 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_387 <= j_1_reg_1181;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd0) & (tmp_fu_574_p2 == 1'd1))) begin
        j_reg_387 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_s_reg_398 <= j_1_1_reg_1199;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_748_p2 == 1'd1))) begin
        j_s_reg_398 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd0))) begin
        sum_1_1_reg_483 <= sum_s_reg_458;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        sum_1_1_reg_483 <= sum_2_1_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd0))) begin
        sum_1_2_reg_531 <= sum_3_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        sum_1_2_reg_531 <= sum_2_2_fu_1074_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd0))) begin
        sum_1_reg_435 <= sum_reg_410;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sum_1_reg_435 <= sum_2_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (exitcond_2_fu_1018_p2 == 1'd1))) begin
        sum_3_reg_506 <= sum_1_2_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd1))) begin
        sum_3_reg_506 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_836_p2 == 1'd1))) begin
        sum_reg_410 <= sum_1_reg_435;
    end else if (((1'b1 == ap_CS_fsm_state7) & (((exitcond6_2_fu_667_p2 == 1'd1) & (tmp_reg_1092 == 1'd1)) | ((exitcond3_fu_641_p2 == 1'd1) & (tmp_reg_1092 == 1'd0))))) begin
        sum_reg_410 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond_1_fu_925_p2 == 1'd1))) begin
        sum_s_reg_458 <= sum_1_1_reg_483;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd1))) begin
        sum_s_reg_458 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd1))) begin
        x_reg_329 <= x_1_reg_1087;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_reg_329 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_3_1_reg_1268 <= i_3_1_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        i_3_2_reg_1324 <= i_3_2_fu_986_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_3_reg_1212 <= i_3_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_1_reg_1199 <= j_1_1_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_reg_1092 == 1'd1))) begin
        j_1_2_reg_1153 <= j_1_2_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_reg_1181 <= j_1_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_reg_1092 == 1'd0))) begin
        j_2_reg_1140 <= j_2_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_3_1_reg_1117 <= j_3_1_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_1099 <= j_3_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_4_2_reg_1337 <= j_4_2_fu_1024_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_5_reg_1225 <= j_5_fu_842_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (((exitcond6_2_fu_667_p2 == 1'd1) & (tmp_reg_1092 == 1'd1)) | ((exitcond3_fu_641_p2 == 1'd1) & (tmp_reg_1092 == 1'd0))))) begin
        output_addr_1_reg_1168 <= tmp_28_cast_fu_727_p1;
        output_addr_2_reg_1173 <= tmp_29_cast_fu_738_p1;
        output_addr_reg_1163 <= tmp_27_cast_fu_716_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_554 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_12_1_reg_1281 <= tmp_12_1_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_15_1_reg_1311 <= tmp_15_1_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_15_2_reg_1367 <= tmp_15_2_fu_1069_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_15_reg_1255 <= tmp_15_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_1_fu_597_p2 == 1'd1))) begin
        tmp_16_reg_1132 <= tmp_16_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_18_reg_1250 <= tmp_18_fu_869_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_19_reg_1306 <= tmp_19_fu_958_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tmp_20_reg_1362 <= tmp_20_fu_1057_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd0))) begin
        tmp_28_reg_1217 <= tmp_28_fu_830_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd0))) begin
        tmp_30_reg_1273 <= tmp_30_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd0))) begin
        tmp_33_reg_1329 <= tmp_33_fu_1008_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_580_p2 == 1'd0))) begin
        tmp_3_reg_1104[2 : 0] <= tmp_3_fu_592_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_1_fu_597_p2 == 1'd0))) begin
        tmp_7_1_reg_1122[2 : 0] <= tmp_7_1_fu_609_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_748_p2 == 1'd0))) begin
        tmp_8_reg_1186[2 : 0] <= tmp_8_fu_760_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd0))) begin
        tmp_reg_1092 <= tmp_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_1_reg_1087 <= x_1_fu_568_p2;
        x_cast_reg_1079[1 : 0] <= x_cast_fu_558_p1[1 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = tmp_21_cast_fu_787_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = tmp_8_fu_760_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond6_2_fu_667_p2 == 1'd0) & (tmp_reg_1092 == 1'd1))) begin
        input_r_address0 = tmp_24_cast_fu_689_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_641_p2 == 1'd0) & (tmp_reg_1092 == 1'd0))) begin
        input_r_address0 = tmp_25_cast_fu_662_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state7) & (exitcond6_2_fu_667_p2 == 1'd0) & (tmp_reg_1092 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (exitcond3_fu_641_p2 == 1'd0) & (tmp_reg_1092 == 1'd0)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        kernel_address0 = tmp_38_cast_fu_1052_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        kernel_address0 = tmp_37_cast_fu_953_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        kernel_address0 = tmp_34_cast_fu_864_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        line_buffer_0_address0 = tmp_13_2_fu_1036_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        line_buffer_0_address0 = tmp_13_1_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        line_buffer_0_address0 = tmp_17_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        line_buffer_0_address0 = tmp_8_reg_1186;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_0_address0 = tmp_3_reg_1104;
    end else begin
        line_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        line_buffer_0_ce0 = 1'b1;
    end else begin
        line_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        line_buffer_0_d0 = input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        line_buffer_0_d0 = line_buffer_1_q0;
    end else begin
        line_buffer_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        line_buffer_0_we0 = 1'b1;
    end else begin
        line_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        line_buffer_1_address0 = tmp_13_2_fu_1036_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        line_buffer_1_address0 = tmp_13_1_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        line_buffer_1_address0 = tmp_17_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        line_buffer_1_address0 = tmp_8_1_fu_792_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_1_address0 = tmp_7_1_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        line_buffer_1_address0 = tmp_3_fu_592_p1;
    end else begin
        line_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3))) begin
        line_buffer_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        line_buffer_1_d0 = input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        line_buffer_1_d0 = line_buffer_2_q0;
    end else begin
        line_buffer_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        line_buffer_1_we0 = 1'b1;
    end else begin
        line_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        line_buffer_2_address0 = tmp_13_2_fu_1036_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        line_buffer_2_address0 = tmp_13_1_fu_937_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        line_buffer_2_address0 = tmp_17_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        line_buffer_2_address0 = tmp_8_2_fu_797_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        line_buffer_2_address0 = tmp_s_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        line_buffer_2_address0 = tmp_7_1_fu_609_p1;
    end else begin
        line_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5))) begin
        line_buffer_2_ce0 = 1'b1;
    end else begin
        line_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        line_buffer_2_we0 = 1'b1;
    end else begin
        line_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_address0 = output_addr_2_reg_1173;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_address0 = output_addr_1_reg_1168;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_address0 = output_addr_reg_1163;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state14))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_r_d0 = sum_3_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d0 = sum_s_reg_458;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_d0 = sum_reg_410;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd1)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_562_p2 == 1'd0) & (tmp_fu_574_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond4_fu_580_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_1_fu_597_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (((exitcond6_2_fu_667_p2 == 1'd1) & (tmp_reg_1092 == 1'd1)) | ((exitcond3_fu_641_p2 == 1'd1) & (tmp_reg_1092 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond6_2_fu_667_p2 == 1'd0) & (tmp_reg_1092 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_748_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond6_1_fu_765_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (exitcond1_fu_802_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond_fu_836_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond1_1_fu_891_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond_1_fu_925_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (exitcond1_2_fu_980_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (exitcond_2_fu_1018_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_1_fu_891_p2 = ((i4_1_reg_471 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_2_fu_980_p2 = ((i4_2_reg_519 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_fu_802_p2 = ((i4_reg_423 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_641_p2 = ((j3_reg_363 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_1_fu_597_p2 = ((j2_1_reg_352 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond4_fu_580_p2 = ((j2_reg_341 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_1_fu_765_p2 = ((j_s_reg_398 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_2_fu_667_p2 = ((j_4_reg_375 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond6_fu_748_p2 = ((j_reg_387 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond8_fu_562_p2 = ((x_reg_329 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_1_fu_925_p2 = ((j5_1_reg_495 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_2_fu_1018_p2 = ((j5_2_reg_543 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_836_p2 = ((j5_reg_447 == 2'd3) ? 1'b1 : 1'b0);

assign i_3_1_fu_897_p2 = (i4_1_reg_471 + 2'd1);

assign i_3_2_fu_986_p2 = (i4_2_reg_519 + 2'd1);

assign i_3_fu_808_p2 = (i4_reg_423 + 2'd1);

assign j5_2_cast_fu_1014_p1 = j5_2_reg_543;

assign j_1_1_fu_771_p2 = (j_s_reg_398 + 3'd1);

assign j_1_2_fu_673_p2 = (j_4_reg_375 + 3'd1);

assign j_1_fu_754_p2 = (j_reg_387 + 3'd1);

assign j_2_fu_647_p2 = (j3_reg_363 + 3'd1);

assign j_3_1_fu_603_p2 = (j2_1_reg_352 + 3'd1);

assign j_3_fu_586_p2 = (j2_reg_341 + 3'd1);

assign j_4_2_fu_1024_p2 = (j5_2_reg_543 + 2'd1);

assign j_5_fu_842_p2 = (j5_reg_447 + 2'd1);

assign p_shl1_cast_fu_706_p1 = tmp_23_fu_698_p3;

assign p_shl2_cast_fu_826_p1 = tmp_27_fu_818_p3;

assign p_shl3_cast_fu_915_p1 = tmp_29_fu_907_p3;

assign p_shl4_cast_fu_1004_p1 = tmp_32_fu_996_p3;

assign p_shl_cast_fu_631_p1 = tmp_14_fu_623_p3;

assign sum_2_1_fu_975_p2 = (sum_1_1_reg_483 + tmp_15_1_reg_1311);

assign sum_2_2_fu_1074_p2 = (sum_1_2_reg_531 + tmp_15_2_reg_1367);

assign sum_2_fu_886_p2 = (sum_1_reg_435 + tmp_15_reg_1255);

assign tmp_10_fu_781_p2 = (tmp_8_1_cast_fu_777_p1 + 4'd5);

assign tmp_11_1_cast_fu_903_p1 = i4_1_reg_471;

assign tmp_11_2_cast_fu_992_p1 = i4_2_reg_519;

assign tmp_12_1_fu_931_p2 = (j5_1_reg_495 + 2'd1);

assign tmp_12_2_fu_1030_p2 = (j5_2_cast_fu_1014_p1 + 3'd2);

assign tmp_13_1_fu_937_p1 = tmp_12_1_fu_931_p2;

assign tmp_13_2_fu_1036_p1 = tmp_12_2_fu_1030_p2;

assign tmp_14_1_cast_fu_944_p1 = j5_1_reg_495;

assign tmp_14_2_cast_fu_1043_p1 = j5_2_reg_543;

assign tmp_14_fu_623_p3 = {{tmp_2_fu_614_p2}, {2'd0}};

assign tmp_15_1_fu_970_p2 = ($signed(tmp_19_reg_1306) * $signed(reg_554));

assign tmp_15_2_fu_1069_p2 = ($signed(tmp_20_reg_1362) * $signed(reg_554));

assign tmp_15_fu_881_p2 = ($signed(tmp_18_reg_1250) * $signed(reg_554));

assign tmp_16_cast_fu_814_p1 = i4_reg_423;

assign tmp_16_fu_635_p2 = (tmp_3_cast_fu_619_p1 + p_shl_cast_fu_631_p1);

assign tmp_17_cast_fu_855_p1 = j5_reg_447;

assign tmp_17_fu_848_p1 = j5_reg_447;

assign tmp_21_cast_fu_787_p1 = tmp_10_fu_781_p2;

assign tmp_21_fu_683_p2 = ($signed(tmp_8_2_cast_fu_679_p1) + $signed(4'd10));

assign tmp_22_fu_657_p2 = (tmp_16_reg_1132 + tmp_cast_fu_653_p1);

assign tmp_23_fu_698_p3 = {{x_reg_329}, {2'd0}};

assign tmp_24_cast_fu_689_p1 = tmp_21_fu_683_p2;

assign tmp_24_fu_710_p2 = (p_shl1_cast_fu_706_p1 - tmp_9_cast_fu_694_p1);

assign tmp_25_cast_fu_662_p1 = tmp_22_fu_657_p2;

assign tmp_25_fu_721_p2 = ($signed(tmp_24_fu_710_p2) + $signed(5'd1));

assign tmp_26_fu_732_p2 = ($signed(tmp_24_fu_710_p2) + $signed(5'd2));

assign tmp_27_cast_fu_716_p1 = tmp_24_fu_710_p2;

assign tmp_27_fu_818_p3 = {{i4_reg_423}, {2'd0}};

assign tmp_28_cast_fu_727_p1 = $signed(tmp_25_fu_721_p2);

assign tmp_28_fu_830_p2 = (p_shl2_cast_fu_826_p1 - tmp_16_cast_fu_814_p1);

assign tmp_29_cast_fu_738_p1 = $signed(tmp_26_fu_732_p2);

assign tmp_29_fu_907_p3 = {{i4_1_reg_471}, {2'd0}};

assign tmp_2_fu_614_p2 = (x_cast_reg_1079 + 3'd2);

assign tmp_30_fu_919_p2 = (p_shl3_cast_fu_915_p1 - tmp_11_1_cast_fu_903_p1);

assign tmp_31_fu_859_p2 = (tmp_28_reg_1217 + tmp_17_cast_fu_855_p1);

assign tmp_32_fu_996_p3 = {{i4_2_reg_519}, {2'd0}};

assign tmp_33_fu_1008_p2 = (p_shl4_cast_fu_1004_p1 - tmp_11_2_cast_fu_992_p1);

assign tmp_34_cast_fu_864_p1 = $signed(tmp_31_fu_859_p2);

assign tmp_34_fu_948_p2 = (tmp_30_reg_1273 + tmp_14_1_cast_fu_944_p1);

assign tmp_35_fu_1047_p2 = (tmp_33_reg_1329 + tmp_14_2_cast_fu_1043_p1);

assign tmp_37_cast_fu_953_p1 = $signed(tmp_34_fu_948_p2);

assign tmp_38_cast_fu_1052_p1 = $signed(tmp_35_fu_1047_p2);

assign tmp_3_cast_fu_619_p1 = tmp_2_fu_614_p2;

assign tmp_3_fu_592_p1 = j2_reg_341;

assign tmp_7_1_fu_609_p1 = j2_1_reg_352;

assign tmp_8_1_cast_fu_777_p1 = j_s_reg_398;

assign tmp_8_1_fu_792_p1 = j_s_reg_398;

assign tmp_8_2_cast_fu_679_p1 = j_4_reg_375;

assign tmp_8_2_fu_797_p1 = j_4_reg_375;

assign tmp_8_fu_760_p1 = j_reg_387;

assign tmp_9_cast_fu_694_p1 = x_reg_329;

assign tmp_cast_fu_653_p1 = j3_reg_363;

assign tmp_fu_574_p2 = ((x_reg_329 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_743_p1 = j3_reg_363;

assign x_1_fu_568_p2 = (x_reg_329 + 2'd1);

assign x_cast_fu_558_p1 = x_reg_329;

always @ (posedge ap_clk) begin
    x_cast_reg_1079[2] <= 1'b0;
    tmp_3_reg_1104[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_7_1_reg_1122[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_8_reg_1186[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //conv2d
