-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=16,HLS_SYN_TPT=13,HLS_SYN_MEM=0,HLS_SYN_DSP=165,HLS_SYN_FF=3343,HLS_SYN_LUT=3738,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_612 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_636 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_1_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_2_reg_1246 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_3_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_0_0_2_reg_1286 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_4_reg_1291 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_5_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_0_2_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_6_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_7_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_0_2_reg_1360 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_0_1_2_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_0_1_2_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_load_8_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_691_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_1_1_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_0_0_2_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_1_2_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_1_1_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_1_2_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_1_2_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp22_reg_1447 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_13_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_0_2_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_0_2_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_0_1_1_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp29_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_14_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_2_1_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_2_1_reg_1504 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_2_2_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_1_2_2_reg_1509 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_reg_1514 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_1_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_1_reg_1519 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_0_1_2_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp23_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp23_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_1_1_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp30_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp30_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1554 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_1559 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_2_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_0_2_2_2_reg_1564 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_17_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_1_2_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_1_2_reg_1579 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_0_2_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_0_2_reg_1584 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_reg_1589 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_1_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_1_reg_1594 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_2_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_1_2_reg_1599 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp17_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp17_reg_1614 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_19_reg_1619 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_0_2_2_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_0_2_2_reg_1625 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_reg_1630 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_1_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_1_reg_1635 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp37_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp37_reg_1645 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp24_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp24_reg_1660 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_2_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_1_2_2_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_1_fu_910_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_1_reg_1670 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_2_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_1_2_2_2_reg_1675 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_21_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_reg_1686 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_1_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_1_reg_1691 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_2_fu_929_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_1_2_reg_1696 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp31_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp31_reg_1706 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp38_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp38_reg_1711 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_2_1_fu_981_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_2_1_reg_1716 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp44_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp44_reg_1721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_0_2_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_0_2_reg_1726 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_reg_1731 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_1_fu_999_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_1_reg_1736 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_2_2_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_0_2_2_reg_1741 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_2_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_1_2_reg_1746 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_2_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_2_reg_1751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_2_2_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_1_2_2_reg_1756 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp51_fu_1043_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp51_reg_1761 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_0_1_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_0_1_reg_1771 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp45_fu_1070_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp45_reg_1776 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp52_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp52_reg_1781 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_0_2_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_0_2_reg_1786 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_1_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_1_reg_1791 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_1_2_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_2_2_1_2_reg_1796 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp57_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp57_reg_1801 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp58_fu_1134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp58_reg_1806 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp59_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp59_reg_1811 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal sum_2_0_0_2_2_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_1_2_2_fu_828_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_0_2_2_2_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_0_2_2_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_1_2_2_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_1_2_2_2_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_0_2_2_fu_1117_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_1_2_2_fu_1128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_2_2_2_2_fu_1165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp20_fu_838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp19_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp18_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_fu_874_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp27_fu_888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp26_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp25_fu_884_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp21_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp34_fu_947_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp33_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp41_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp40_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp39_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp28_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp35_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp48_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp47_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp46_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp55_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp54_fu_1085_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp53_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp42_fu_1112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp49_fu_1123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp62_fu_1143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp61_fu_1149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp60_fu_1138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp56_fu_1161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage12_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                reg_490 <= input_r_q0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_490 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                reg_499 <= input_r_q0;
            elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
                reg_499 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_504_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    reg_504 <= input_r_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                    reg_504 <= input_r_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                input_load_13_reg_1462 <= input_r_q1;
                tmp29_reg_1482 <= grp_fu_660_p2;
                tmp_15_1_0_1_1_reg_1477 <= grp_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                input_load_14_reg_1497 <= input_r_q0;
                tmp_15_1_0_1_2_reg_1524 <= grp_fu_559_p2;
                tmp_15_1_1_1_1_reg_1534 <= grp_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                input_load_17_reg_1569 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                input_load_19_reg_1619 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                input_load_21_reg_1680 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                kernel_load_1_reg_1218 <= kernel_q1;
                kernel_load_reg_1211 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                kernel_load_2_reg_1246 <= kernel_q0;
                kernel_load_3_reg_1256 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_4_reg_1291 <= kernel_q0;
                kernel_load_5_reg_1301 <= kernel_q1;
                tmp_15_0_0_0_2_reg_1286 <= grp_fu_524_p2;
                tmp_15_0_1_0_2_reg_1313 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                kernel_load_6_reg_1333 <= kernel_q0;
                kernel_load_7_reg_1344 <= kernel_q1;
                tmp15_reg_1365 <= grp_fu_660_p2;
                tmp8_reg_1355 <= grp_fu_666_p2;
                tmp_15_0_2_0_2_reg_1360 <= grp_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                kernel_load_8_reg_1385 <= kernel_q0;
                tmp_15_0_1_1_1_reg_1402 <= grp_fu_554_p2;
                tmp_15_1_0_0_2_reg_1407 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_486 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_495 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_604 <= grp_fu_509_p2;
                reg_608 <= grp_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_612 <= grp_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_616 <= grp_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then
                reg_620 <= grp_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)))) then
                reg_624 <= grp_fu_544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)))) then
                reg_628 <= grp_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)))) then
                reg_632 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_636 <= grp_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)))) then
                reg_640 <= grp_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_644 <= grp_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_648 <= grp_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_652 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)))) then
                reg_656 <= grp_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_678 <= grp_fu_660_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_682 <= grp_fu_672_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                tmp10_reg_1559 <= tmp10_fu_781_p2;
                tmp3_reg_1554 <= tmp3_fu_761_p2;
                tmp_15_0_2_2_2_reg_1564 <= tmp_15_0_2_2_2_fu_787_p2;
                tmp_15_1_1_1_2_reg_1579 <= tmp_15_1_1_1_2_fu_791_p2;
                tmp_15_1_2_0_2_reg_1584 <= tmp_15_1_2_0_2_fu_795_p2;
                tmp_15_1_2_1_1_reg_1594 <= tmp_15_1_2_1_1_fu_805_p2;
                tmp_15_1_2_1_2_reg_1599 <= tmp_15_1_2_1_2_fu_809_p2;
                tmp_15_1_2_1_reg_1589 <= tmp_15_1_2_1_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                tmp16_reg_1442 <= tmp16_fu_706_p2;
                tmp9_reg_1427 <= tmp9_fu_696_p2;
                tmp_15_0_2_1_2_reg_1437 <= tmp_15_0_2_1_2_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001))) then
                tmp17_reg_1614 <= tmp17_fu_847_p2;
                tmp37_reg_1645 <= tmp37_fu_870_p2;
                tmp_15_1_0_2_2_reg_1625 <= tmp_15_1_0_2_2_fu_853_p2;
                tmp_15_1_1_2_1_reg_1635 <= tmp_15_1_1_2_1_fu_862_p2;
                tmp_15_1_1_2_reg_1630 <= tmp_15_1_1_2_fu_857_p2;
                tmp_15_1_2_2_reg_1640 <= tmp_15_1_2_2_fu_866_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001))) then
                tmp22_reg_1447 <= grp_fu_666_p2;
                tmp_15_0_1_1_2_reg_1422 <= grp_fu_559_p2;
                tmp_15_0_2_1_1_reg_1432 <= grp_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                tmp23_reg_1529 <= tmp23_fu_734_p2;
                tmp30_reg_1539 <= tmp30_fu_739_p2;
                tmp_15_0_1_2_1_reg_1504 <= tmp_15_0_1_2_1_fu_716_p2;
                tmp_15_0_1_2_2_reg_1509 <= tmp_15_0_1_2_2_fu_721_p2;
                tmp_15_0_2_2_1_reg_1519 <= tmp_15_0_2_2_1_fu_730_p2;
                tmp_15_0_2_2_reg_1514 <= tmp_15_0_2_2_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                tmp24_reg_1660 <= tmp24_fu_899_p2;
                tmp_15_1_1_2_2_reg_1665 <= tmp_15_1_1_2_2_fu_905_p2;
                tmp_15_1_2_2_1_reg_1670 <= tmp_15_1_2_2_1_fu_910_p2;
                tmp_15_1_2_2_2_reg_1675 <= tmp_15_1_2_2_2_fu_915_p2;
                tmp_15_2_0_1_1_reg_1691 <= tmp_15_2_0_1_1_fu_924_p2;
                tmp_15_2_0_1_2_reg_1696 <= tmp_15_2_0_1_2_fu_929_p2;
                tmp_15_2_0_1_reg_1686 <= tmp_15_2_0_1_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                tmp2_reg_1397 <= tmp2_fu_691_p2;
                tmp_15_0_0_1_2_reg_1380 <= tmp_15_0_0_1_2_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                tmp31_reg_1706 <= tmp31_fu_956_p2;
                tmp38_reg_1711 <= tmp38_fu_975_p2;
                tmp44_reg_1721 <= tmp44_fu_985_p2;
                tmp_15_2_0_2_1_reg_1716 <= tmp_15_2_0_2_1_fu_981_p2;
                tmp_15_2_1_0_2_reg_1726 <= tmp_15_2_1_0_2_fu_990_p2;
                tmp_15_2_1_1_1_reg_1736 <= tmp_15_2_1_1_1_fu_999_p2;
                tmp_15_2_1_1_reg_1731 <= tmp_15_2_1_1_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp45_reg_1776 <= tmp45_fu_1070_p2;
                tmp52_reg_1781 <= tmp52_fu_1090_p2;
                tmp57_reg_1801 <= tmp57_fu_1108_p2;
                tmp_15_2_2_0_2_reg_1786 <= tmp_15_2_2_0_2_fu_1096_p2;
                tmp_15_2_2_1_2_reg_1796 <= tmp_15_2_2_1_2_fu_1104_p2;
                tmp_15_2_2_1_reg_1791 <= tmp_15_2_2_1_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp51_reg_1761 <= tmp51_fu_1043_p2;
                tmp_15_2_0_2_2_reg_1741 <= tmp_15_2_0_2_2_fu_1024_p2;
                tmp_15_2_1_1_2_reg_1746 <= tmp_15_2_1_1_2_fu_1029_p2;
                tmp_15_2_1_2_2_reg_1756 <= tmp_15_2_1_2_2_fu_1038_p2;
                tmp_15_2_1_2_reg_1751 <= tmp_15_2_1_2_fu_1034_p2;
                tmp_15_2_2_0_1_reg_1771 <= tmp_15_2_2_0_1_fu_1052_p2;
                tmp_15_2_2_reg_1766 <= tmp_15_2_2_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp58_reg_1806 <= tmp58_fu_1134_p2;
                tmp59_reg_1811 <= tmp59_fu_1155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001))) then
                tmp_15_0_0_2_reg_1472 <= tmp_15_0_0_2_fu_711_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_reset_idle_pp0, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_509_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_reg_1211))), 32));
    grp_fu_514_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_1_reg_1218))), 32));
    grp_fu_519_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_reg_1211))), 32));
    grp_fu_524_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_2_reg_1246))), 32));
    grp_fu_529_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_1_reg_1218))), 32));
    grp_fu_534_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_2_reg_1246))), 32));
    grp_fu_539_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_3_reg_1256))), 32));
    grp_fu_544_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_4_reg_1291))), 32));
    grp_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_3_reg_1256))), 32));
    grp_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_4_reg_1291))), 32));
    grp_fu_559_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_5_reg_1301))), 32));
    grp_fu_564_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_4_reg_1291))), 32));
    grp_fu_569_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_2_reg_1246))), 32));
    grp_fu_574_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_7_reg_1344))), 32));
    grp_fu_579_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_6_reg_1333))), 32));
    grp_fu_584_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_1_reg_1218))), 32));
    grp_fu_589_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_8_reg_1385))), 32));
    grp_fu_594_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_504) * signed(kernel_load_6_reg_1333))), 32));
    grp_fu_599_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_7_reg_1344))), 32));
    grp_fu_660_p2 <= std_logic_vector(unsigned(reg_604) + unsigned(reg_608));
    grp_fu_666_p2 <= std_logic_vector(unsigned(reg_612) + unsigned(reg_616));
    grp_fu_672_p2 <= std_logic_vector(unsigned(reg_612) + unsigned(reg_644));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                input_r_address0 <= ap_const_lv64_18(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                input_r_address0 <= ap_const_lv64_16(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                input_r_address0 <= ap_const_lv64_14(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                input_r_address0 <= ap_const_lv64_12(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                input_r_address0 <= ap_const_lv64_10(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                input_r_address0 <= ap_const_lv64_E(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                input_r_address0 <= ap_const_lv64_C(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_r_address0 <= ap_const_lv64_A(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address0 <= ap_const_lv64_8(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address0 <= ap_const_lv64_6(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= ap_const_lv64_4(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= ap_const_lv64_2(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= ap_const_lv64_0(5 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                input_r_address1 <= ap_const_lv64_17(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                input_r_address1 <= ap_const_lv64_15(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                input_r_address1 <= ap_const_lv64_13(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                input_r_address1 <= ap_const_lv64_11(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                input_r_address1 <= ap_const_lv64_F(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                input_r_address1 <= ap_const_lv64_D(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_r_address1 <= ap_const_lv64_B(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= ap_const_lv64_9(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= ap_const_lv64_7(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= ap_const_lv64_5(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= ap_const_lv64_3(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= ap_const_lv64_1(5 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= ap_const_lv64_8(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= ap_const_lv64_6(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= ap_const_lv64_4(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                kernel_address0 <= "XXXX";
            end if;
        else 
            kernel_address0 <= "XXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= ap_const_lv64_7(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= ap_const_lv64_5(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address1 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                kernel_address1 <= "XXXX";
            end if;
        else 
            kernel_address1 <= "XXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage10, ap_block_pp0_stage12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            output_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_r_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            output_r_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            output_r_address0 <= "XXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            output_r_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            output_r_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            output_r_address1 <= "XXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage10, ap_block_pp0_stage12, sum_2_0_1_2_2_fu_828_p2, sum_2_1_0_2_2_fu_937_p2, sum_2_1_1_2_2_fu_1007_p2, sum_2_2_0_2_2_fu_1117_p2, sum_2_2_2_2_2_fu_1165_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            output_r_d0 <= sum_2_2_2_2_2_fu_1165_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_d0 <= sum_2_2_0_2_2_fu_1117_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_d0 <= sum_2_1_1_2_2_fu_1007_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            output_r_d0 <= sum_2_1_0_2_2_fu_937_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            output_r_d0 <= sum_2_0_1_2_2_fu_828_p2;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage10, ap_block_pp0_stage11, sum_2_0_0_2_2_fu_818_p2, sum_2_0_2_2_2_fu_878_p2, sum_2_1_2_2_2_fu_1018_p2, sum_2_2_1_2_2_fu_1128_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            output_r_d1 <= sum_2_2_1_2_2_fu_1128_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_d1 <= sum_2_1_2_2_2_fu_1018_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            output_r_d1 <= sum_2_0_2_2_2_fu_878_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            output_r_d1 <= sum_2_0_0_2_2_fu_818_p2;
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_2_0_0_2_2_fu_818_p2 <= std_logic_vector(unsigned(tmp3_reg_1554) + unsigned(tmp_fu_813_p2));
    sum_2_0_1_2_2_fu_828_p2 <= std_logic_vector(unsigned(tmp10_reg_1559) + unsigned(tmp7_fu_824_p2));
    sum_2_0_2_2_2_fu_878_p2 <= std_logic_vector(unsigned(tmp17_reg_1614) + unsigned(tmp14_fu_874_p2));
    sum_2_1_0_2_2_fu_937_p2 <= std_logic_vector(unsigned(tmp24_reg_1660) + unsigned(tmp21_fu_933_p2));
    sum_2_1_1_2_2_fu_1007_p2 <= std_logic_vector(unsigned(tmp31_reg_1706) + unsigned(tmp28_fu_1003_p2));
    sum_2_1_2_2_2_fu_1018_p2 <= std_logic_vector(unsigned(tmp38_reg_1711) + unsigned(tmp35_fu_1013_p2));
    sum_2_2_0_2_2_fu_1117_p2 <= std_logic_vector(unsigned(tmp45_reg_1776) + unsigned(tmp42_fu_1112_p2));
    sum_2_2_1_2_2_fu_1128_p2 <= std_logic_vector(unsigned(tmp52_reg_1781) + unsigned(tmp49_fu_1123_p2));
    sum_2_2_2_2_2_fu_1165_p2 <= std_logic_vector(unsigned(tmp59_reg_1811) + unsigned(tmp56_fu_1161_p2));
    tmp10_fu_781_p2 <= std_logic_vector(unsigned(tmp12_fu_775_p2) + unsigned(tmp11_fu_767_p2));
    tmp11_fu_767_p2 <= std_logic_vector(unsigned(tmp_15_0_1_1_1_reg_1402) + unsigned(tmp_15_0_1_1_2_reg_1422));
    tmp12_fu_775_p2 <= std_logic_vector(unsigned(tmp13_fu_771_p2) + unsigned(reg_640));
    tmp13_fu_771_p2 <= std_logic_vector(unsigned(tmp_15_0_1_2_1_reg_1504) + unsigned(tmp_15_0_1_2_2_reg_1509));
    tmp14_fu_874_p2 <= std_logic_vector(unsigned(tmp16_reg_1442) + unsigned(tmp15_reg_1365));
    tmp16_fu_706_p2 <= std_logic_vector(unsigned(tmp_15_0_2_0_2_reg_1360) + unsigned(reg_620));
    tmp17_fu_847_p2 <= std_logic_vector(unsigned(tmp19_fu_842_p2) + unsigned(tmp18_fu_834_p2));
    tmp18_fu_834_p2 <= std_logic_vector(unsigned(tmp_15_0_2_1_1_reg_1432) + unsigned(tmp_15_0_2_1_2_reg_1437));
    tmp19_fu_842_p2 <= std_logic_vector(unsigned(tmp20_fu_838_p2) + unsigned(tmp_15_0_2_2_reg_1514));
    tmp20_fu_838_p2 <= std_logic_vector(unsigned(tmp_15_0_2_2_1_reg_1519) + unsigned(tmp_15_0_2_2_2_reg_1564));
    tmp21_fu_933_p2 <= std_logic_vector(unsigned(tmp23_reg_1529) + unsigned(tmp22_reg_1447));
    tmp23_fu_734_p2 <= std_logic_vector(unsigned(tmp_15_1_0_0_2_reg_1407) + unsigned(reg_628));
    tmp24_fu_899_p2 <= std_logic_vector(unsigned(tmp26_fu_893_p2) + unsigned(tmp25_fu_884_p2));
    tmp25_fu_884_p2 <= std_logic_vector(unsigned(tmp_15_1_0_1_1_reg_1477) + unsigned(tmp_15_1_0_1_2_reg_1524));
    tmp26_fu_893_p2 <= std_logic_vector(unsigned(tmp27_fu_888_p2) + unsigned(reg_652));
    tmp27_fu_888_p2 <= std_logic_vector(unsigned(reg_656) + unsigned(tmp_15_1_0_2_2_reg_1625));
    tmp28_fu_1003_p2 <= std_logic_vector(unsigned(tmp30_reg_1539) + unsigned(tmp29_reg_1482));
    tmp2_fu_691_p2 <= std_logic_vector(unsigned(tmp_15_0_0_0_2_reg_1286) + unsigned(reg_620));
    tmp30_fu_739_p2 <= std_logic_vector(unsigned(reg_632) + unsigned(reg_620));
    tmp31_fu_956_p2 <= std_logic_vector(unsigned(tmp33_fu_951_p2) + unsigned(tmp32_fu_943_p2));
    tmp32_fu_943_p2 <= std_logic_vector(unsigned(tmp_15_1_1_1_1_reg_1534) + unsigned(tmp_15_1_1_1_2_reg_1579));
    tmp33_fu_951_p2 <= std_logic_vector(unsigned(tmp34_fu_947_p2) + unsigned(tmp_15_1_1_2_reg_1630));
    tmp34_fu_947_p2 <= std_logic_vector(unsigned(tmp_15_1_1_2_1_reg_1635) + unsigned(tmp_15_1_1_2_2_reg_1665));
    tmp35_fu_1013_p2 <= std_logic_vector(unsigned(tmp37_reg_1645) + unsigned(reg_682));
    tmp37_fu_870_p2 <= std_logic_vector(unsigned(tmp_15_1_2_0_2_reg_1584) + unsigned(tmp_15_1_2_1_reg_1589));
    tmp38_fu_975_p2 <= std_logic_vector(unsigned(tmp40_fu_970_p2) + unsigned(tmp39_fu_962_p2));
    tmp39_fu_962_p2 <= std_logic_vector(unsigned(tmp_15_1_2_1_1_reg_1594) + unsigned(tmp_15_1_2_1_2_reg_1599));
    tmp3_fu_761_p2 <= std_logic_vector(unsigned(tmp5_fu_756_p2) + unsigned(tmp4_fu_745_p2));
    tmp40_fu_970_p2 <= std_logic_vector(unsigned(tmp41_fu_966_p2) + unsigned(tmp_15_1_2_2_reg_1640));
    tmp41_fu_966_p2 <= std_logic_vector(unsigned(tmp_15_1_2_2_1_reg_1670) + unsigned(tmp_15_1_2_2_2_reg_1675));
    tmp42_fu_1112_p2 <= std_logic_vector(unsigned(tmp44_reg_1721) + unsigned(reg_678));
    tmp44_fu_985_p2 <= std_logic_vector(unsigned(reg_632) + unsigned(tmp_15_2_0_1_reg_1686));
    tmp45_fu_1070_p2 <= std_logic_vector(unsigned(tmp47_fu_1064_p2) + unsigned(tmp46_fu_1056_p2));
    tmp46_fu_1056_p2 <= std_logic_vector(unsigned(tmp_15_2_0_1_1_reg_1691) + unsigned(tmp_15_2_0_1_2_reg_1696));
    tmp47_fu_1064_p2 <= std_logic_vector(unsigned(tmp48_fu_1060_p2) + unsigned(reg_652));
    tmp48_fu_1060_p2 <= std_logic_vector(unsigned(tmp_15_2_0_2_1_reg_1716) + unsigned(tmp_15_2_0_2_2_reg_1741));
    tmp49_fu_1123_p2 <= std_logic_vector(unsigned(tmp51_reg_1761) + unsigned(reg_682));
    tmp4_fu_745_p2 <= std_logic_vector(unsigned(reg_624) + unsigned(tmp_15_0_0_1_2_reg_1380));
    tmp51_fu_1043_p2 <= std_logic_vector(unsigned(tmp_15_2_1_0_2_reg_1726) + unsigned(tmp_15_2_1_1_reg_1731));
    tmp52_fu_1090_p2 <= std_logic_vector(unsigned(tmp54_fu_1085_p2) + unsigned(tmp53_fu_1076_p2));
    tmp53_fu_1076_p2 <= std_logic_vector(unsigned(tmp_15_2_1_1_1_reg_1736) + unsigned(tmp_15_2_1_1_2_reg_1746));
    tmp54_fu_1085_p2 <= std_logic_vector(unsigned(tmp55_fu_1080_p2) + unsigned(tmp_15_2_1_2_reg_1751));
    tmp55_fu_1080_p2 <= std_logic_vector(unsigned(reg_636) + unsigned(tmp_15_2_1_2_2_reg_1756));
    tmp56_fu_1161_p2 <= std_logic_vector(unsigned(tmp58_reg_1806) + unsigned(tmp57_reg_1801));
    tmp57_fu_1108_p2 <= std_logic_vector(unsigned(tmp_15_2_2_reg_1766) + unsigned(tmp_15_2_2_0_1_reg_1771));
    tmp58_fu_1134_p2 <= std_logic_vector(unsigned(tmp_15_2_2_0_2_reg_1786) + unsigned(tmp_15_2_2_1_reg_1791));
    tmp59_fu_1155_p2 <= std_logic_vector(unsigned(tmp61_fu_1149_p2) + unsigned(tmp60_fu_1138_p2));
    tmp5_fu_756_p2 <= std_logic_vector(unsigned(tmp6_fu_750_p2) + unsigned(tmp_15_0_0_2_reg_1472));
    tmp60_fu_1138_p2 <= std_logic_vector(unsigned(reg_624) + unsigned(tmp_15_2_2_1_2_reg_1796));
    tmp61_fu_1149_p2 <= std_logic_vector(unsigned(tmp62_fu_1143_p2) + unsigned(reg_640));
    tmp62_fu_1143_p2 <= std_logic_vector(unsigned(reg_656) + unsigned(reg_648));
    tmp6_fu_750_p2 <= std_logic_vector(unsigned(reg_636) + unsigned(reg_648));
    tmp7_fu_824_p2 <= std_logic_vector(unsigned(tmp9_reg_1427) + unsigned(tmp8_reg_1355));
    tmp9_fu_696_p2 <= std_logic_vector(unsigned(tmp_15_0_1_0_2_reg_1313) + unsigned(reg_628));
    tmp_15_0_0_1_2_fu_686_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_0_0_2_fu_711_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_6_reg_1333))), 32));
    tmp_15_0_1_2_1_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_7_reg_1344))), 32));
    tmp_15_0_1_2_2_fu_721_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_0_2_1_2_fu_701_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_0_2_2_1_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_7_reg_1344))), 32));
    tmp_15_0_2_2_2_fu_787_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_14_reg_1497) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_0_2_2_fu_725_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_6_reg_1333))), 32));
    tmp_15_1_0_2_2_fu_853_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_1_1_1_2_fu_791_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_1_1_2_1_fu_862_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_7_reg_1344))), 32));
    tmp_15_1_1_2_2_fu_905_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_1_1_2_fu_857_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_6_reg_1333))), 32));
    tmp_15_1_2_0_2_fu_795_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_2_reg_1246))), 32));
    tmp_15_1_2_1_1_fu_805_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_4_reg_1291))), 32));
    tmp_15_1_2_1_2_fu_809_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_14_reg_1497) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_1_2_1_fu_800_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_3_reg_1256))), 32));
    tmp_15_1_2_2_1_fu_910_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_7_reg_1344))), 32));
    tmp_15_1_2_2_2_fu_915_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_19_reg_1619) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_1_2_2_fu_866_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_6_reg_1333))), 32));
    tmp_15_2_0_1_1_fu_924_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_4_reg_1291))), 32));
    tmp_15_2_0_1_2_fu_929_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_2_0_1_fu_919_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_504) * signed(kernel_load_3_reg_1256))), 32));
    tmp_15_2_0_2_1_fu_981_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_21_reg_1680) * signed(kernel_load_7_reg_1344))), 32));
    tmp_15_2_0_2_2_fu_1024_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_490) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_2_1_0_2_fu_990_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_2_reg_1246))), 32));
    tmp_15_2_1_1_1_fu_999_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_4_reg_1291))), 32));
    tmp_15_2_1_1_2_fu_1029_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_486) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_2_1_1_fu_994_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_3_reg_1256))), 32));
    tmp_15_2_1_2_2_fu_1038_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_499) * signed(kernel_load_8_reg_1385))), 32));
    tmp_15_2_1_2_fu_1034_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_21_reg_1680) * signed(kernel_load_6_reg_1333))), 32));
    tmp_15_2_2_0_1_fu_1052_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_13_reg_1462) * signed(kernel_load_1_reg_1218))), 32));
    tmp_15_2_2_0_2_fu_1096_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_14_reg_1497) * signed(kernel_load_2_reg_1246))), 32));
    tmp_15_2_2_1_2_fu_1104_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_19_reg_1619) * signed(kernel_load_5_reg_1301))), 32));
    tmp_15_2_2_1_fu_1100_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(input_load_17_reg_1569) * signed(kernel_load_3_reg_1256))), 32));
    tmp_15_2_2_fu_1047_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_495) * signed(kernel_load_reg_1211))), 32));
    tmp_fu_813_p2 <= std_logic_vector(unsigned(tmp2_reg_1397) + unsigned(reg_678));
end behav;
