// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=16,HLS_SYN_TPT=13,HLS_SYN_MEM=0,HLS_SYN_DSP=165,HLS_SYN_FF=3343,HLS_SYN_LUT=3738,HLS_VERSION=2018_3}" *)

module conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 13'd1;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2;
parameter    ap_ST_fsm_pp0_stage2 = 13'd4;
parameter    ap_ST_fsm_pp0_stage3 = 13'd8;
parameter    ap_ST_fsm_pp0_stage4 = 13'd16;
parameter    ap_ST_fsm_pp0_stage5 = 13'd32;
parameter    ap_ST_fsm_pp0_stage6 = 13'd64;
parameter    ap_ST_fsm_pp0_stage7 = 13'd128;
parameter    ap_ST_fsm_pp0_stage8 = 13'd256;
parameter    ap_ST_fsm_pp0_stage9 = 13'd512;
parameter    ap_ST_fsm_pp0_stage10 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 13'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [4:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [3:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [3:0] kernel_address1;
output   kernel_ce1;
input  [31:0] kernel_q1;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output  [3:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [31:0] output_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] input_r_address0;
reg input_r_ce0;
reg[4:0] input_r_address1;
reg input_r_ce1;
reg[3:0] kernel_address0;
reg kernel_ce0;
reg[3:0] kernel_address1;
reg kernel_ce1;
reg[3:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg[3:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;
reg[31:0] output_r_d1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg  signed [31:0] reg_486;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg  signed [31:0] reg_490;
reg  signed [31:0] reg_495;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] reg_499;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
reg  signed [31:0] reg_504;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [31:0] grp_fu_509_p2;
reg   [31:0] reg_604;
wire   [31:0] grp_fu_514_p2;
reg   [31:0] reg_608;
wire   [31:0] grp_fu_519_p2;
reg   [31:0] reg_612;
wire   [31:0] grp_fu_529_p2;
reg   [31:0] reg_616;
wire   [31:0] grp_fu_539_p2;
reg   [31:0] reg_620;
wire   [31:0] grp_fu_544_p2;
reg   [31:0] reg_624;
wire   [31:0] grp_fu_549_p2;
reg   [31:0] reg_628;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] reg_632;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] reg_636;
wire   [31:0] grp_fu_579_p2;
reg   [31:0] reg_640;
wire   [31:0] grp_fu_584_p2;
reg   [31:0] reg_644;
wire   [31:0] grp_fu_589_p2;
reg   [31:0] reg_648;
wire   [31:0] grp_fu_594_p2;
reg   [31:0] reg_652;
wire   [31:0] grp_fu_599_p2;
reg   [31:0] reg_656;
wire   [31:0] grp_fu_660_p2;
reg   [31:0] reg_678;
wire   [31:0] grp_fu_672_p2;
reg   [31:0] reg_682;
reg  signed [31:0] kernel_load_reg_1211;
reg  signed [31:0] kernel_load_1_reg_1218;
reg  signed [31:0] kernel_load_2_reg_1246;
reg  signed [31:0] kernel_load_3_reg_1256;
wire   [31:0] grp_fu_524_p2;
reg   [31:0] tmp_15_0_0_0_2_reg_1286;
reg  signed [31:0] kernel_load_4_reg_1291;
reg  signed [31:0] kernel_load_5_reg_1301;
wire   [31:0] grp_fu_534_p2;
reg   [31:0] tmp_15_0_1_0_2_reg_1313;
reg  signed [31:0] kernel_load_6_reg_1333;
reg  signed [31:0] kernel_load_7_reg_1344;
wire   [31:0] grp_fu_666_p2;
reg   [31:0] tmp8_reg_1355;
reg   [31:0] tmp_15_0_2_0_2_reg_1360;
reg   [31:0] tmp15_reg_1365;
wire   [31:0] tmp_15_0_0_1_2_fu_686_p2;
reg   [31:0] tmp_15_0_0_1_2_reg_1380;
reg  signed [31:0] kernel_load_8_reg_1385;
wire   [31:0] tmp2_fu_691_p2;
reg   [31:0] tmp2_reg_1397;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] tmp_15_0_1_1_1_reg_1402;
reg   [31:0] tmp_15_1_0_0_2_reg_1407;
wire   [31:0] grp_fu_559_p2;
reg   [31:0] tmp_15_0_1_1_2_reg_1422;
wire   [31:0] tmp9_fu_696_p2;
reg   [31:0] tmp9_reg_1427;
wire   [31:0] grp_fu_564_p2;
reg   [31:0] tmp_15_0_2_1_1_reg_1432;
wire   [31:0] tmp_15_0_2_1_2_fu_701_p2;
reg   [31:0] tmp_15_0_2_1_2_reg_1437;
wire   [31:0] tmp16_fu_706_p2;
reg   [31:0] tmp16_reg_1442;
reg   [31:0] tmp22_reg_1447;
reg  signed [31:0] input_load_13_reg_1462;
wire   [31:0] tmp_15_0_0_2_fu_711_p2;
reg   [31:0] tmp_15_0_0_2_reg_1472;
reg   [31:0] tmp_15_1_0_1_1_reg_1477;
reg   [31:0] tmp29_reg_1482;
reg  signed [31:0] input_load_14_reg_1497;
wire   [31:0] tmp_15_0_1_2_1_fu_716_p2;
reg   [31:0] tmp_15_0_1_2_1_reg_1504;
wire   [31:0] tmp_15_0_1_2_2_fu_721_p2;
reg   [31:0] tmp_15_0_1_2_2_reg_1509;
wire   [31:0] tmp_15_0_2_2_fu_725_p2;
reg   [31:0] tmp_15_0_2_2_reg_1514;
wire   [31:0] tmp_15_0_2_2_1_fu_730_p2;
reg   [31:0] tmp_15_0_2_2_1_reg_1519;
reg   [31:0] tmp_15_1_0_1_2_reg_1524;
wire   [31:0] tmp23_fu_734_p2;
reg   [31:0] tmp23_reg_1529;
reg   [31:0] tmp_15_1_1_1_1_reg_1534;
wire   [31:0] tmp30_fu_739_p2;
reg   [31:0] tmp30_reg_1539;
wire   [31:0] tmp3_fu_761_p2;
reg   [31:0] tmp3_reg_1554;
wire   [31:0] tmp10_fu_781_p2;
reg   [31:0] tmp10_reg_1559;
wire   [31:0] tmp_15_0_2_2_2_fu_787_p2;
reg   [31:0] tmp_15_0_2_2_2_reg_1564;
reg  signed [31:0] input_load_17_reg_1569;
wire   [31:0] tmp_15_1_1_1_2_fu_791_p2;
reg   [31:0] tmp_15_1_1_1_2_reg_1579;
wire   [31:0] tmp_15_1_2_0_2_fu_795_p2;
reg   [31:0] tmp_15_1_2_0_2_reg_1584;
wire   [31:0] tmp_15_1_2_1_fu_800_p2;
reg   [31:0] tmp_15_1_2_1_reg_1589;
wire   [31:0] tmp_15_1_2_1_1_fu_805_p2;
reg   [31:0] tmp_15_1_2_1_1_reg_1594;
wire   [31:0] tmp_15_1_2_1_2_fu_809_p2;
reg   [31:0] tmp_15_1_2_1_2_reg_1599;
wire   [31:0] tmp17_fu_847_p2;
reg   [31:0] tmp17_reg_1614;
reg  signed [31:0] input_load_19_reg_1619;
wire   [31:0] tmp_15_1_0_2_2_fu_853_p2;
reg   [31:0] tmp_15_1_0_2_2_reg_1625;
wire   [31:0] tmp_15_1_1_2_fu_857_p2;
reg   [31:0] tmp_15_1_1_2_reg_1630;
wire   [31:0] tmp_15_1_1_2_1_fu_862_p2;
reg   [31:0] tmp_15_1_1_2_1_reg_1635;
wire   [31:0] tmp_15_1_2_2_fu_866_p2;
reg   [31:0] tmp_15_1_2_2_reg_1640;
wire   [31:0] tmp37_fu_870_p2;
reg   [31:0] tmp37_reg_1645;
wire   [31:0] tmp24_fu_899_p2;
reg   [31:0] tmp24_reg_1660;
wire   [31:0] tmp_15_1_1_2_2_fu_905_p2;
reg   [31:0] tmp_15_1_1_2_2_reg_1665;
wire   [31:0] tmp_15_1_2_2_1_fu_910_p2;
reg   [31:0] tmp_15_1_2_2_1_reg_1670;
wire   [31:0] tmp_15_1_2_2_2_fu_915_p2;
reg   [31:0] tmp_15_1_2_2_2_reg_1675;
reg  signed [31:0] input_load_21_reg_1680;
wire   [31:0] tmp_15_2_0_1_fu_919_p2;
reg   [31:0] tmp_15_2_0_1_reg_1686;
wire   [31:0] tmp_15_2_0_1_1_fu_924_p2;
reg   [31:0] tmp_15_2_0_1_1_reg_1691;
wire   [31:0] tmp_15_2_0_1_2_fu_929_p2;
reg   [31:0] tmp_15_2_0_1_2_reg_1696;
wire   [31:0] tmp31_fu_956_p2;
reg   [31:0] tmp31_reg_1706;
wire   [31:0] tmp38_fu_975_p2;
reg   [31:0] tmp38_reg_1711;
wire   [31:0] tmp_15_2_0_2_1_fu_981_p2;
reg   [31:0] tmp_15_2_0_2_1_reg_1716;
wire   [31:0] tmp44_fu_985_p2;
reg   [31:0] tmp44_reg_1721;
wire   [31:0] tmp_15_2_1_0_2_fu_990_p2;
reg   [31:0] tmp_15_2_1_0_2_reg_1726;
wire   [31:0] tmp_15_2_1_1_fu_994_p2;
reg   [31:0] tmp_15_2_1_1_reg_1731;
wire   [31:0] tmp_15_2_1_1_1_fu_999_p2;
reg   [31:0] tmp_15_2_1_1_1_reg_1736;
wire   [31:0] tmp_15_2_0_2_2_fu_1024_p2;
reg   [31:0] tmp_15_2_0_2_2_reg_1741;
wire   [31:0] tmp_15_2_1_1_2_fu_1029_p2;
reg   [31:0] tmp_15_2_1_1_2_reg_1746;
wire   [31:0] tmp_15_2_1_2_fu_1034_p2;
reg   [31:0] tmp_15_2_1_2_reg_1751;
wire   [31:0] tmp_15_2_1_2_2_fu_1038_p2;
reg   [31:0] tmp_15_2_1_2_2_reg_1756;
wire   [31:0] tmp51_fu_1043_p2;
reg   [31:0] tmp51_reg_1761;
wire   [31:0] tmp_15_2_2_fu_1047_p2;
reg   [31:0] tmp_15_2_2_reg_1766;
wire   [31:0] tmp_15_2_2_0_1_fu_1052_p2;
reg   [31:0] tmp_15_2_2_0_1_reg_1771;
wire   [31:0] tmp45_fu_1070_p2;
reg   [31:0] tmp45_reg_1776;
wire   [31:0] tmp52_fu_1090_p2;
reg   [31:0] tmp52_reg_1781;
wire   [31:0] tmp_15_2_2_0_2_fu_1096_p2;
reg   [31:0] tmp_15_2_2_0_2_reg_1786;
wire   [31:0] tmp_15_2_2_1_fu_1100_p2;
reg   [31:0] tmp_15_2_2_1_reg_1791;
wire   [31:0] tmp_15_2_2_1_2_fu_1104_p2;
reg   [31:0] tmp_15_2_2_1_2_reg_1796;
wire   [31:0] tmp57_fu_1108_p2;
reg   [31:0] tmp57_reg_1801;
wire   [31:0] tmp58_fu_1134_p2;
reg   [31:0] tmp58_reg_1806;
wire   [31:0] tmp59_fu_1155_p2;
reg   [31:0] tmp59_reg_1811;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage12;
wire   [31:0] sum_2_0_0_2_2_fu_818_p2;
wire   [31:0] sum_2_0_1_2_2_fu_828_p2;
wire   [31:0] sum_2_0_2_2_2_fu_878_p2;
wire   [31:0] sum_2_1_0_2_2_fu_937_p2;
wire   [31:0] sum_2_1_1_2_2_fu_1007_p2;
wire   [31:0] sum_2_1_2_2_2_fu_1018_p2;
wire   [31:0] sum_2_2_0_2_2_fu_1117_p2;
wire   [31:0] sum_2_2_1_2_2_fu_1128_p2;
wire   [31:0] sum_2_2_2_2_2_fu_1165_p2;
wire   [31:0] tmp6_fu_750_p2;
wire   [31:0] tmp5_fu_756_p2;
wire   [31:0] tmp4_fu_745_p2;
wire   [31:0] tmp13_fu_771_p2;
wire   [31:0] tmp12_fu_775_p2;
wire   [31:0] tmp11_fu_767_p2;
wire   [31:0] tmp_fu_813_p2;
wire   [31:0] tmp7_fu_824_p2;
wire   [31:0] tmp20_fu_838_p2;
wire   [31:0] tmp19_fu_842_p2;
wire   [31:0] tmp18_fu_834_p2;
wire   [31:0] tmp14_fu_874_p2;
wire   [31:0] tmp27_fu_888_p2;
wire   [31:0] tmp26_fu_893_p2;
wire   [31:0] tmp25_fu_884_p2;
wire   [31:0] tmp21_fu_933_p2;
wire   [31:0] tmp34_fu_947_p2;
wire   [31:0] tmp33_fu_951_p2;
wire   [31:0] tmp32_fu_943_p2;
wire   [31:0] tmp41_fu_966_p2;
wire   [31:0] tmp40_fu_970_p2;
wire   [31:0] tmp39_fu_962_p2;
wire   [31:0] tmp28_fu_1003_p2;
wire   [31:0] tmp35_fu_1013_p2;
wire   [31:0] tmp48_fu_1060_p2;
wire   [31:0] tmp47_fu_1064_p2;
wire   [31:0] tmp46_fu_1056_p2;
wire   [31:0] tmp55_fu_1080_p2;
wire   [31:0] tmp54_fu_1085_p2;
wire   [31:0] tmp53_fu_1076_p2;
wire   [31:0] tmp42_fu_1112_p2;
wire   [31:0] tmp49_fu_1123_p2;
wire   [31:0] tmp62_fu_1143_p2;
wire   [31:0] tmp61_fu_1149_p2;
wire   [31:0] tmp60_fu_1138_p2;
wire   [31:0] tmp56_fu_1161_p2;
reg   [12:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage12_subdone) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        reg_490 <= input_r_q0;
    end else if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_490 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        reg_499 <= input_r_q0;
    end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_499 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            reg_504 <= input_r_q0;
        end else if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            reg_504 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        input_load_13_reg_1462 <= input_r_q1;
        tmp29_reg_1482 <= grp_fu_660_p2;
        tmp_15_1_0_1_1_reg_1477 <= grp_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        input_load_14_reg_1497 <= input_r_q0;
        tmp_15_1_0_1_2_reg_1524 <= grp_fu_559_p2;
        tmp_15_1_1_1_1_reg_1534 <= grp_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        input_load_17_reg_1569 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        input_load_19_reg_1619 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        input_load_21_reg_1680 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_load_1_reg_1218 <= kernel_q1;
        kernel_load_reg_1211 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        kernel_load_2_reg_1246 <= kernel_q0;
        kernel_load_3_reg_1256 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        kernel_load_4_reg_1291 <= kernel_q0;
        kernel_load_5_reg_1301 <= kernel_q1;
        tmp_15_0_0_0_2_reg_1286 <= grp_fu_524_p2;
        tmp_15_0_1_0_2_reg_1313 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        kernel_load_6_reg_1333 <= kernel_q0;
        kernel_load_7_reg_1344 <= kernel_q1;
        tmp15_reg_1365 <= grp_fu_660_p2;
        tmp8_reg_1355 <= grp_fu_666_p2;
        tmp_15_0_2_0_2_reg_1360 <= grp_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        kernel_load_8_reg_1385 <= kernel_q0;
        tmp_15_0_1_1_1_reg_1402 <= grp_fu_554_p2;
        tmp_15_1_0_0_2_reg_1407 <= grp_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_486 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_495 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_604 <= grp_fu_509_p2;
        reg_608 <= grp_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_612 <= grp_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_616 <= grp_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_620 <= grp_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)))) begin
        reg_624 <= grp_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)))) begin
        reg_628 <= grp_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        reg_632 <= grp_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_636 <= grp_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)))) begin
        reg_640 <= grp_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_644 <= grp_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
        reg_648 <= grp_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_652 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)))) begin
        reg_656 <= grp_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_678 <= grp_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_682 <= grp_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        tmp10_reg_1559 <= tmp10_fu_781_p2;
        tmp3_reg_1554 <= tmp3_fu_761_p2;
        tmp_15_0_2_2_2_reg_1564 <= tmp_15_0_2_2_2_fu_787_p2;
        tmp_15_1_1_1_2_reg_1579 <= tmp_15_1_1_1_2_fu_791_p2;
        tmp_15_1_2_0_2_reg_1584 <= tmp_15_1_2_0_2_fu_795_p2;
        tmp_15_1_2_1_1_reg_1594 <= tmp_15_1_2_1_1_fu_805_p2;
        tmp_15_1_2_1_2_reg_1599 <= tmp_15_1_2_1_2_fu_809_p2;
        tmp_15_1_2_1_reg_1589 <= tmp_15_1_2_1_fu_800_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        tmp16_reg_1442 <= tmp16_fu_706_p2;
        tmp9_reg_1427 <= tmp9_fu_696_p2;
        tmp_15_0_2_1_2_reg_1437 <= tmp_15_0_2_1_2_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        tmp17_reg_1614 <= tmp17_fu_847_p2;
        tmp37_reg_1645 <= tmp37_fu_870_p2;
        tmp_15_1_0_2_2_reg_1625 <= tmp_15_1_0_2_2_fu_853_p2;
        tmp_15_1_1_2_1_reg_1635 <= tmp_15_1_1_2_1_fu_862_p2;
        tmp_15_1_1_2_reg_1630 <= tmp_15_1_1_2_fu_857_p2;
        tmp_15_1_2_2_reg_1640 <= tmp_15_1_2_2_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        tmp22_reg_1447 <= grp_fu_666_p2;
        tmp_15_0_1_1_2_reg_1422 <= grp_fu_559_p2;
        tmp_15_0_2_1_1_reg_1432 <= grp_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        tmp23_reg_1529 <= tmp23_fu_734_p2;
        tmp30_reg_1539 <= tmp30_fu_739_p2;
        tmp_15_0_1_2_1_reg_1504 <= tmp_15_0_1_2_1_fu_716_p2;
        tmp_15_0_1_2_2_reg_1509 <= tmp_15_0_1_2_2_fu_721_p2;
        tmp_15_0_2_2_1_reg_1519 <= tmp_15_0_2_2_1_fu_730_p2;
        tmp_15_0_2_2_reg_1514 <= tmp_15_0_2_2_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        tmp24_reg_1660 <= tmp24_fu_899_p2;
        tmp_15_1_1_2_2_reg_1665 <= tmp_15_1_1_2_2_fu_905_p2;
        tmp_15_1_2_2_1_reg_1670 <= tmp_15_1_2_2_1_fu_910_p2;
        tmp_15_1_2_2_2_reg_1675 <= tmp_15_1_2_2_2_fu_915_p2;
        tmp_15_2_0_1_1_reg_1691 <= tmp_15_2_0_1_1_fu_924_p2;
        tmp_15_2_0_1_2_reg_1696 <= tmp_15_2_0_1_2_fu_929_p2;
        tmp_15_2_0_1_reg_1686 <= tmp_15_2_0_1_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp2_reg_1397 <= tmp2_fu_691_p2;
        tmp_15_0_0_1_2_reg_1380 <= tmp_15_0_0_1_2_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        tmp31_reg_1706 <= tmp31_fu_956_p2;
        tmp38_reg_1711 <= tmp38_fu_975_p2;
        tmp44_reg_1721 <= tmp44_fu_985_p2;
        tmp_15_2_0_2_1_reg_1716 <= tmp_15_2_0_2_1_fu_981_p2;
        tmp_15_2_1_0_2_reg_1726 <= tmp_15_2_1_0_2_fu_990_p2;
        tmp_15_2_1_1_1_reg_1736 <= tmp_15_2_1_1_1_fu_999_p2;
        tmp_15_2_1_1_reg_1731 <= tmp_15_2_1_1_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp45_reg_1776 <= tmp45_fu_1070_p2;
        tmp52_reg_1781 <= tmp52_fu_1090_p2;
        tmp57_reg_1801 <= tmp57_fu_1108_p2;
        tmp_15_2_2_0_2_reg_1786 <= tmp_15_2_2_0_2_fu_1096_p2;
        tmp_15_2_2_1_2_reg_1796 <= tmp_15_2_2_1_2_fu_1104_p2;
        tmp_15_2_2_1_reg_1791 <= tmp_15_2_2_1_fu_1100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp51_reg_1761 <= tmp51_fu_1043_p2;
        tmp_15_2_0_2_2_reg_1741 <= tmp_15_2_0_2_2_fu_1024_p2;
        tmp_15_2_1_1_2_reg_1746 <= tmp_15_2_1_1_2_fu_1029_p2;
        tmp_15_2_1_2_2_reg_1756 <= tmp_15_2_1_2_2_fu_1038_p2;
        tmp_15_2_1_2_reg_1751 <= tmp_15_2_1_2_fu_1034_p2;
        tmp_15_2_2_0_1_reg_1771 <= tmp_15_2_2_0_1_fu_1052_p2;
        tmp_15_2_2_reg_1766 <= tmp_15_2_2_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp58_reg_1806 <= tmp58_fu_1134_p2;
        tmp59_reg_1811 <= tmp59_fu_1155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        tmp_15_0_0_2_reg_1472 <= tmp_15_0_0_2_fu_711_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
            input_r_address0 = 64'd24;
        end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            input_r_address0 = 64'd22;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            input_r_address0 = 64'd20;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            input_r_address0 = 64'd18;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            input_r_address0 = 64'd16;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_r_address0 = 64'd14;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_r_address0 = 64'd12;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_r_address0 = 64'd10;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = 64'd0;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            input_r_address1 = 64'd23;
        end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            input_r_address1 = 64'd21;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            input_r_address1 = 64'd19;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            input_r_address1 = 64'd17;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_r_address1 = 64'd15;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_r_address1 = 64'd13;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_r_address1 = 64'd11;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = 64'd9;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address1 = 64'd1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = 64'd0;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address1 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address1 = 64'd1;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        output_r_address0 = 64'd8;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_address0 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address0 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_r_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        output_r_address0 = 64'd1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_address1 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_address1 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        output_r_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        output_r_address1 = 64'd0;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        output_r_d0 = sum_2_2_2_2_2_fu_1165_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_d0 = sum_2_2_0_2_2_fu_1117_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_d0 = sum_2_1_1_2_2_fu_1007_p2;
    end else if (((1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_r_d0 = sum_2_1_0_2_2_fu_937_p2;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        output_r_d0 = sum_2_0_1_2_2_fu_828_p2;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_d1 = sum_2_2_1_2_2_fu_1128_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_d1 = sum_2_1_2_2_2_fu_1018_p2;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        output_r_d1 = sum_2_0_2_2_2_fu_878_p2;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        output_r_d1 = sum_2_0_0_2_2_fu_818_p2;
    end else begin
        output_r_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_509_p2 = ($signed(reg_486) * $signed(kernel_load_reg_1211));

assign grp_fu_514_p2 = ($signed(reg_490) * $signed(kernel_load_1_reg_1218));

assign grp_fu_519_p2 = ($signed(reg_490) * $signed(kernel_load_reg_1211));

assign grp_fu_524_p2 = ($signed(reg_486) * $signed(kernel_load_2_reg_1246));

assign grp_fu_529_p2 = ($signed(reg_486) * $signed(kernel_load_1_reg_1218));

assign grp_fu_534_p2 = ($signed(reg_490) * $signed(kernel_load_2_reg_1246));

assign grp_fu_539_p2 = ($signed(reg_490) * $signed(kernel_load_3_reg_1256));

assign grp_fu_544_p2 = ($signed(reg_486) * $signed(kernel_load_4_reg_1291));

assign grp_fu_549_p2 = ($signed(reg_486) * $signed(kernel_load_3_reg_1256));

assign grp_fu_554_p2 = ($signed(reg_490) * $signed(kernel_load_4_reg_1291));

assign grp_fu_559_p2 = ($signed(reg_495) * $signed(kernel_load_5_reg_1301));

assign grp_fu_564_p2 = ($signed(reg_495) * $signed(kernel_load_4_reg_1291));

assign grp_fu_569_p2 = ($signed(reg_495) * $signed(kernel_load_2_reg_1246));

assign grp_fu_574_p2 = ($signed(reg_490) * $signed(kernel_load_7_reg_1344));

assign grp_fu_579_p2 = ($signed(reg_490) * $signed(kernel_load_6_reg_1333));

assign grp_fu_584_p2 = ($signed(reg_495) * $signed(kernel_load_1_reg_1218));

assign grp_fu_589_p2 = ($signed(reg_495) * $signed(kernel_load_8_reg_1385));

assign grp_fu_594_p2 = ($signed(reg_504) * $signed(kernel_load_6_reg_1333));

assign grp_fu_599_p2 = ($signed(reg_499) * $signed(kernel_load_7_reg_1344));

assign grp_fu_660_p2 = (reg_604 + reg_608);

assign grp_fu_666_p2 = (reg_612 + reg_616);

assign grp_fu_672_p2 = (reg_612 + reg_644);

assign sum_2_0_0_2_2_fu_818_p2 = (tmp3_reg_1554 + tmp_fu_813_p2);

assign sum_2_0_1_2_2_fu_828_p2 = (tmp10_reg_1559 + tmp7_fu_824_p2);

assign sum_2_0_2_2_2_fu_878_p2 = (tmp17_reg_1614 + tmp14_fu_874_p2);

assign sum_2_1_0_2_2_fu_937_p2 = (tmp24_reg_1660 + tmp21_fu_933_p2);

assign sum_2_1_1_2_2_fu_1007_p2 = (tmp31_reg_1706 + tmp28_fu_1003_p2);

assign sum_2_1_2_2_2_fu_1018_p2 = (tmp38_reg_1711 + tmp35_fu_1013_p2);

assign sum_2_2_0_2_2_fu_1117_p2 = (tmp45_reg_1776 + tmp42_fu_1112_p2);

assign sum_2_2_1_2_2_fu_1128_p2 = (tmp52_reg_1781 + tmp49_fu_1123_p2);

assign sum_2_2_2_2_2_fu_1165_p2 = (tmp59_reg_1811 + tmp56_fu_1161_p2);

assign tmp10_fu_781_p2 = (tmp12_fu_775_p2 + tmp11_fu_767_p2);

assign tmp11_fu_767_p2 = (tmp_15_0_1_1_1_reg_1402 + tmp_15_0_1_1_2_reg_1422);

assign tmp12_fu_775_p2 = (tmp13_fu_771_p2 + reg_640);

assign tmp13_fu_771_p2 = (tmp_15_0_1_2_1_reg_1504 + tmp_15_0_1_2_2_reg_1509);

assign tmp14_fu_874_p2 = (tmp16_reg_1442 + tmp15_reg_1365);

assign tmp16_fu_706_p2 = (tmp_15_0_2_0_2_reg_1360 + reg_620);

assign tmp17_fu_847_p2 = (tmp19_fu_842_p2 + tmp18_fu_834_p2);

assign tmp18_fu_834_p2 = (tmp_15_0_2_1_1_reg_1432 + tmp_15_0_2_1_2_reg_1437);

assign tmp19_fu_842_p2 = (tmp20_fu_838_p2 + tmp_15_0_2_2_reg_1514);

assign tmp20_fu_838_p2 = (tmp_15_0_2_2_1_reg_1519 + tmp_15_0_2_2_2_reg_1564);

assign tmp21_fu_933_p2 = (tmp23_reg_1529 + tmp22_reg_1447);

assign tmp23_fu_734_p2 = (tmp_15_1_0_0_2_reg_1407 + reg_628);

assign tmp24_fu_899_p2 = (tmp26_fu_893_p2 + tmp25_fu_884_p2);

assign tmp25_fu_884_p2 = (tmp_15_1_0_1_1_reg_1477 + tmp_15_1_0_1_2_reg_1524);

assign tmp26_fu_893_p2 = (tmp27_fu_888_p2 + reg_652);

assign tmp27_fu_888_p2 = (reg_656 + tmp_15_1_0_2_2_reg_1625);

assign tmp28_fu_1003_p2 = (tmp30_reg_1539 + tmp29_reg_1482);

assign tmp2_fu_691_p2 = (tmp_15_0_0_0_2_reg_1286 + reg_620);

assign tmp30_fu_739_p2 = (reg_632 + reg_620);

assign tmp31_fu_956_p2 = (tmp33_fu_951_p2 + tmp32_fu_943_p2);

assign tmp32_fu_943_p2 = (tmp_15_1_1_1_1_reg_1534 + tmp_15_1_1_1_2_reg_1579);

assign tmp33_fu_951_p2 = (tmp34_fu_947_p2 + tmp_15_1_1_2_reg_1630);

assign tmp34_fu_947_p2 = (tmp_15_1_1_2_1_reg_1635 + tmp_15_1_1_2_2_reg_1665);

assign tmp35_fu_1013_p2 = (tmp37_reg_1645 + reg_682);

assign tmp37_fu_870_p2 = (tmp_15_1_2_0_2_reg_1584 + tmp_15_1_2_1_reg_1589);

assign tmp38_fu_975_p2 = (tmp40_fu_970_p2 + tmp39_fu_962_p2);

assign tmp39_fu_962_p2 = (tmp_15_1_2_1_1_reg_1594 + tmp_15_1_2_1_2_reg_1599);

assign tmp3_fu_761_p2 = (tmp5_fu_756_p2 + tmp4_fu_745_p2);

assign tmp40_fu_970_p2 = (tmp41_fu_966_p2 + tmp_15_1_2_2_reg_1640);

assign tmp41_fu_966_p2 = (tmp_15_1_2_2_1_reg_1670 + tmp_15_1_2_2_2_reg_1675);

assign tmp42_fu_1112_p2 = (tmp44_reg_1721 + reg_678);

assign tmp44_fu_985_p2 = (reg_632 + tmp_15_2_0_1_reg_1686);

assign tmp45_fu_1070_p2 = (tmp47_fu_1064_p2 + tmp46_fu_1056_p2);

assign tmp46_fu_1056_p2 = (tmp_15_2_0_1_1_reg_1691 + tmp_15_2_0_1_2_reg_1696);

assign tmp47_fu_1064_p2 = (tmp48_fu_1060_p2 + reg_652);

assign tmp48_fu_1060_p2 = (tmp_15_2_0_2_1_reg_1716 + tmp_15_2_0_2_2_reg_1741);

assign tmp49_fu_1123_p2 = (tmp51_reg_1761 + reg_682);

assign tmp4_fu_745_p2 = (reg_624 + tmp_15_0_0_1_2_reg_1380);

assign tmp51_fu_1043_p2 = (tmp_15_2_1_0_2_reg_1726 + tmp_15_2_1_1_reg_1731);

assign tmp52_fu_1090_p2 = (tmp54_fu_1085_p2 + tmp53_fu_1076_p2);

assign tmp53_fu_1076_p2 = (tmp_15_2_1_1_1_reg_1736 + tmp_15_2_1_1_2_reg_1746);

assign tmp54_fu_1085_p2 = (tmp55_fu_1080_p2 + tmp_15_2_1_2_reg_1751);

assign tmp55_fu_1080_p2 = (reg_636 + tmp_15_2_1_2_2_reg_1756);

assign tmp56_fu_1161_p2 = (tmp58_reg_1806 + tmp57_reg_1801);

assign tmp57_fu_1108_p2 = (tmp_15_2_2_reg_1766 + tmp_15_2_2_0_1_reg_1771);

assign tmp58_fu_1134_p2 = (tmp_15_2_2_0_2_reg_1786 + tmp_15_2_2_1_reg_1791);

assign tmp59_fu_1155_p2 = (tmp61_fu_1149_p2 + tmp60_fu_1138_p2);

assign tmp5_fu_756_p2 = (tmp6_fu_750_p2 + tmp_15_0_0_2_reg_1472);

assign tmp60_fu_1138_p2 = (reg_624 + tmp_15_2_2_1_2_reg_1796);

assign tmp61_fu_1149_p2 = (tmp62_fu_1143_p2 + reg_640);

assign tmp62_fu_1143_p2 = (reg_656 + reg_648);

assign tmp6_fu_750_p2 = (reg_636 + reg_648);

assign tmp7_fu_824_p2 = (tmp9_reg_1427 + tmp8_reg_1355);

assign tmp9_fu_696_p2 = (tmp_15_0_1_0_2_reg_1313 + reg_628);

assign tmp_15_0_0_1_2_fu_686_p2 = ($signed(reg_490) * $signed(kernel_load_5_reg_1301));

assign tmp_15_0_0_2_fu_711_p2 = ($signed(reg_486) * $signed(kernel_load_6_reg_1333));

assign tmp_15_0_1_2_1_fu_716_p2 = ($signed(reg_495) * $signed(kernel_load_7_reg_1344));

assign tmp_15_0_1_2_2_fu_721_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_8_reg_1385));

assign tmp_15_0_2_1_2_fu_701_p2 = ($signed(reg_499) * $signed(kernel_load_5_reg_1301));

assign tmp_15_0_2_2_1_fu_730_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_7_reg_1344));

assign tmp_15_0_2_2_2_fu_787_p2 = ($signed(input_load_14_reg_1497) * $signed(kernel_load_8_reg_1385));

assign tmp_15_0_2_2_fu_725_p2 = ($signed(reg_495) * $signed(kernel_load_6_reg_1333));

assign tmp_15_1_0_2_2_fu_853_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_8_reg_1385));

assign tmp_15_1_1_1_2_fu_791_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_5_reg_1301));

assign tmp_15_1_1_2_1_fu_862_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_7_reg_1344));

assign tmp_15_1_1_2_2_fu_905_p2 = ($signed(reg_486) * $signed(kernel_load_8_reg_1385));

assign tmp_15_1_1_2_fu_857_p2 = ($signed(reg_499) * $signed(kernel_load_6_reg_1333));

assign tmp_15_1_2_0_2_fu_795_p2 = ($signed(reg_499) * $signed(kernel_load_2_reg_1246));

assign tmp_15_1_2_1_1_fu_805_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_4_reg_1291));

assign tmp_15_1_2_1_2_fu_809_p2 = ($signed(input_load_14_reg_1497) * $signed(kernel_load_5_reg_1301));

assign tmp_15_1_2_1_fu_800_p2 = ($signed(reg_495) * $signed(kernel_load_3_reg_1256));

assign tmp_15_1_2_2_1_fu_910_p2 = ($signed(reg_486) * $signed(kernel_load_7_reg_1344));

assign tmp_15_1_2_2_2_fu_915_p2 = ($signed(input_load_19_reg_1619) * $signed(kernel_load_8_reg_1385));

assign tmp_15_1_2_2_fu_866_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_6_reg_1333));

assign tmp_15_2_0_1_1_fu_924_p2 = ($signed(reg_499) * $signed(kernel_load_4_reg_1291));

assign tmp_15_2_0_1_2_fu_929_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_5_reg_1301));

assign tmp_15_2_0_1_fu_919_p2 = ($signed(reg_504) * $signed(kernel_load_3_reg_1256));

assign tmp_15_2_0_2_1_fu_981_p2 = ($signed(input_load_21_reg_1680) * $signed(kernel_load_7_reg_1344));

assign tmp_15_2_0_2_2_fu_1024_p2 = ($signed(reg_490) * $signed(kernel_load_8_reg_1385));

assign tmp_15_2_1_0_2_fu_990_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_2_reg_1246));

assign tmp_15_2_1_1_1_fu_999_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_4_reg_1291));

assign tmp_15_2_1_1_2_fu_1029_p2 = ($signed(reg_486) * $signed(kernel_load_5_reg_1301));

assign tmp_15_2_1_1_fu_994_p2 = ($signed(reg_499) * $signed(kernel_load_3_reg_1256));

assign tmp_15_2_1_2_2_fu_1038_p2 = ($signed(reg_499) * $signed(kernel_load_8_reg_1385));

assign tmp_15_2_1_2_fu_1034_p2 = ($signed(input_load_21_reg_1680) * $signed(kernel_load_6_reg_1333));

assign tmp_15_2_2_0_1_fu_1052_p2 = ($signed(input_load_13_reg_1462) * $signed(kernel_load_1_reg_1218));

assign tmp_15_2_2_0_2_fu_1096_p2 = ($signed(input_load_14_reg_1497) * $signed(kernel_load_2_reg_1246));

assign tmp_15_2_2_1_2_fu_1104_p2 = ($signed(input_load_19_reg_1619) * $signed(kernel_load_5_reg_1301));

assign tmp_15_2_2_1_fu_1100_p2 = ($signed(input_load_17_reg_1569) * $signed(kernel_load_3_reg_1256));

assign tmp_15_2_2_fu_1047_p2 = ($signed(reg_495) * $signed(kernel_load_reg_1211));

assign tmp_fu_813_p2 = (tmp2_reg_1397 + reg_678);

endmodule //conv2d
